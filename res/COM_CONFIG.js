const _CFG_SYSCODE = {
 "A1":{"Model":"Apple I" ,"CPU":"6502" ,"Speeds":"1.023" ,"Display":"A1_txt" ,"IO":"" ,"ROM":"" ,"KeyFont":"A1_US"}
,"A2":{"Model":"Apple II" ,"CPU":"6502" ,"Speeds":"1.023" ,"Display":"A2_hgr" ,"IO":"" ,"ROM":"" ,"KeyFont":"A2_US"}
,"A2P":{"Model":"Apple II Plus" ,"CPU":"6502" ,"Speeds":"1.023" ,"Display":"A2_hgr" ,"IO":"" ,"ROM":"A2P_R" ,"KeyFont":"A2_US"}
,"A2PE":{"Model":"Apple II EuroPlus" ,"CPU":"6502" ,"Speeds":"1.023" ,"Display":"A2_hgr" ,"IO":"" ,"ROM":"" ,"KeyFont":"A2_US"}
,"A2JP":{"Model":"Apple II J-Plus" ,"CPU":"6502" ,"Speeds":"1.023" ,"Display":"A2_hgr" ,"IO":"" ,"ROM":"" ,"KeyFont":"A2_JP"}
,"A2B":{"Model":"Bell & Howell" ,"CPU":"6502" ,"Speeds":"1.023" ,"Display":"A2_hgr" ,"IO":"" ,"ROM":"" ,"KeyFont":"A1_US_blk"}
,"A3":{"Model":"Apple III" ,"CPU":"6502B" ,"Speeds":"1.8" ,"Display":"A3_dhgr" ,"IO":"" ,"ROM":"" ,"KeyFont":"A3_US"}
,"A3R":{"Model":"Apple III Revised" ,"CPU":"6502B" ,"Speeds":"1.8" ,"Display":"A2_hgr" ,"IO":"" ,"ROM":"" ,"KeyFont":"A3_US"}
,"A2e":{"Model":"Apple IIe RevA/B" ,"CPU":"6502" ,"Speeds":"1.023" ,"Display":"A2_hgr" ,"IO":"" ,"ROM":"" ,"KeyFont":"A2e_US,A2e_UK,A2e_CA,A2e_FR"}
,"A2c":{"Model":"Apple IIc" ,"CPU":"65C02" ,"Speeds":"1.023" ,"Display":"A2_dhgr" ,"IO":"" ,"ROM":"" ,"KeyFont":""}
,"A3P":{"Model":"Apple III Plus" ,"CPU":"6502B" ,"Speeds":"1.8" ,"Display":"A3_dhgr" ,"IO":"" ,"ROM":"" ,"KeyFont":""}
,"A2eE":{"Model":"Apple IIe Enhanced" ,"CPU":"65C02" ,"Speeds":"1.023" ,"Display":"A2_dhgr" ,"IO":"" ,"ROM":"" ,"KeyFont":""}
,"A2GS":{"Model":"Apple IIGS" ,"CPU":"65C816" ,"Speeds":"2.8" ,"Display":"AGS" ,"IO":"" ,"ROM":"" ,"KeyFont":""}
,"A2cM":{"Model":"Apple IIc MemoryExp" ,"CPU":"65C02" ,"Speeds":"1.023" ,"Display":"A2_dhgr" ,"IO":"" ,"ROM":"" ,"KeyFont":""}
,"A2G3":{"Model":"Apple IIGS ROM3" ,"CPU":"65C816" ,"Speeds":"2.8" ,"Display":"AGS" ,"IO":"" ,"ROM":"" ,"KeyFont":""}
,"A2eP":{"Model":"Apple IIe Platinum" ,"CPU":"65C02" ,"Speeds":"1.023" ,"Display":"A2_dhgr" ,"IO":"" ,"ROM":"" ,"KeyFont":""}
}

const _CFG_IORANGES = {
 "A1":{"HostIOHI":"$D010-$D013" ,"HostROMHR":"" ,"SlotIOSI":"" ,"SlotROMSR":""}
,"A2,A2P,A2PE,A2JP,A2B":{"HostIOHI":"$C000-$C07F" ,"HostROMHR":"$C800-$CFFF" ,"SlotIOSI":"$C080-$C0F0/0x10" ,"SlotROMSR":"$C080-$C0F0/0x100"}
,"A2E,A2Ee,A2eP":{"HostIOHI":"$C000-$C07F" ,"HostROMHR":"$C800-$CFFF" ,"SlotIOSI":"$C080-$C0F0/0x10" ,"SlotROMSR":"$C080-$C0F0/0x100"}
,"A2c,A2cM":{"HostIOHI":"$C000-$C07F" ,"HostROMHR":"$C800-$CFFF" ,"SlotIOSI":"$C080-$C0F0/0x10" ,"SlotROMSR":"$C080-$C0F0/0x100"}
,"A3,A3P,A3R":{"HostIOHI":"$C000-$C07F" ,"HostROMHR":"" ,"SlotIOSI":"$C080-$C0F0/0x10" ,"SlotROMSR":"$C080-$C0F0/0x100"}
,"A2G3,A2GS":{"HostIOHI":"$C000-$C07F" ,"HostROMHR":"" ,"SlotIOSI":"$C080-$C0F0/0x10" ,"SlotROMSR":"$C080-$C0F0/0x100"}
}

const _CFG_IOADDR = {
 "$C000":{"Name":"KBD" ,"SYScode":"A2,A2P,A2PE,A2JP<br>,A2B,A2E,A2Ee,A2eP<br>,A2c,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RD" ,"Description":"Last Key Pressed + 128"}
,"$C000":{"Name":"80STOREOFF" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"WR" ,"Description":"Use $C002-$C005 for Aux Memory"}
,"$C000":{"Name":"KBDBUSA" ,"SYScode":"" ,"Range":"HI" ,"Behaviors":"" ,"Description":"V Keyboard 'A' busdata"}
,"$C001":{"Name":"80STOREON" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"WR" ,"Description":"Use PAGE2 for Aux Memory"}
,"$C002":{"Name":"RDMAINRAM" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"WR" ,"Description":"If 80STORE Off: Read Main Mem $0200-$BFFF"}
,"$C003":{"Name":"RDCARDRAM" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"WR" ,"Description":"If 80STORE Off: Read Aux Mem $0200-$BFFF"}
,"$C004":{"Name":"WRMAINRAM" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"WR" ,"Description":"If 80STORE Off: Write Main Mem $0200-$BFFF"}
,"$C005":{"Name":"WRCARDRAM" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"WR" ,"Description":"If 80STORE Off: Write Aux Mem $0200-$BFFF"}
,"$C006":{"Name":"SETSLOTCXROM" ,"SYScode":"A2E,A2Ee,A2eP,A2G3<br>,A2GS" ,"Range":"HI" ,"Behaviors":"WR" ,"Description":"Peripheral ROM ($C100-$CFFF)"}
,"$C007":{"Name":"SETINTCXROM" ,"SYScode":"A2E,A2Ee,A2eP,A2G3<br>,A2GS" ,"Range":"HI" ,"Behaviors":"WR" ,"Description":"Internal ROM ($C100-$CFFF)"}
,"$C008":{"Name":"SETSTDZP" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"WR" ,"Description":"Main Stack and Zero Page"}
,"$C008":{"Name":"KBDBUSB" ,"SYScode":"" ,"Range":"HI" ,"Behaviors":"" ,"Description":"V Keyboard 'B' busdata"}
,"$C009":{"Name":"SETALTZP" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"WR" ,"Description":"Aux Stack and Zero Page"}
,"$C00A":{"Name":"SETINTC3ROM" ,"SYScode":"A2E,A2Ee,A2eP,A2G3<br>,A2GS" ,"Range":"HI" ,"Behaviors":"WR" ,"Description":"ROM in Slot 3"}
,"$C00B":{"Name":"SETSLOTC3ROM" ,"SYScode":"A2E,A2Ee,A2eP,A2G3<br>,A2GS" ,"Range":"HI" ,"Behaviors":"WR" ,"Description":"ROM in Aux Slot"}
,"$C00C":{"Name":"CLR80VID" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"WR" ,"Description":"40 Columns"}
,"$C00D":{"Name":"SET80VID" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"WR" ,"Description":"80 Columns"}
,"$C00E":{"Name":"CLRALTCHAR" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"WR" ,"Description":"Primary Character Set"}
,"$C00F":{"Name":"SETALTCHAR" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"WR" ,"Description":"Alternate Character Set"}
,"$C010":{"Name":"KBDSTRB" ,"SYScode":"A2,A2P,A2PE,A2JP<br>,A2B,A2E,A2Ee,A2eP<br>,A2c,A2cM,A3,A3P<br>,A3R,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"Keyboard Strobe"}
,"$C011":{"Name":"RDLCBNK2" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Status of Selected $Dx Bank"}
,"$C012":{"Name":"RDLCRAM" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Status of $Dx ROM / $Dx RAM"}
,"$C013":{"Name":"RDRAMRD" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Status of Main/Aux RAM Reading"}
,"$C014":{"Name":"RDRAMWRT" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Status of Main/Aux RAM Writing"}
,"$C015":{"Name":"RDCXROM" ,"SYScode":"A2E,A2Ee,A2eP,A2G3<br>,A2GS" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Status of Periph/ROM Access"}
,"$C015":{"Name":"RSTXINT" ,"SYScode":"A2c,A2cM" ,"Range":"HI" ,"Behaviors":"RD" ,"Description":"Reset Mouse X0 Interrupt"}
,"$C016":{"Name":"RDALTZP" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Status of Main/Aux Stack and Zero Page"}
,"$C017":{"Name":"RDC3ROM" ,"SYScode":"A2E,A2Ee,A2eP,A2G3<br>,A2GS" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Status of Slot 3/Aux Slot ROM"}
,"$C017":{"Name":"RSTYINT" ,"SYScode":"A2c,A2cM" ,"Range":"HI" ,"Behaviors":"RD" ,"Description":"Reset Mouse Y0 Interrupt"}
,"$C018":{"Name":"RD80STORE" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Status of $C002-$C005/PAGE2 for Aux Mem"}
,"$C019":{"Name":"RDVBL" ,"SYScode":"A2E,A2Ee,A2eP,A2G3<br>,A2GS" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Vertical Blanking (E:1=drawing G:0=drawing)"}
,"$C019":{"Name":"RSTVBL" ,"SYScode":"A2c,A2cM" ,"Range":"HI" ,"Behaviors":"RD" ,"Description":"Reset Vertical Blanking Interrupt"}
,"$C01A":{"Name":"RDTEXT" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Status of Text/Graphics"}
,"$C01B":{"Name":"RDMIXED" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Status of Full Screen/Mixed Graphics"}
,"$C01C":{"Name":"RDPAGE2" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Status of Page 1/Page 2"}
,"$C01D":{"Name":"RDHIRES" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Status of LoRes/HiRes"}
,"$C01E":{"Name":"RDALTCHAR" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Status of Primary/Alternate Character Set"}
,"$C01F":{"Name":"RD80VID" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Status of 40/80 Columns"}
,"$C020":{"Name":"TAPEOUT" ,"SYScode":"A2,A2P,A2PE,A2JP<br>,A2B,A2E,A2Ee,A2eP" ,"Range":"HI" ,"Behaviors":"RD" ,"Description":"Toggle Cassette Tape Output"}
,"$C021":{"Name":"MONOCOLOR" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"WR,BI" ,"Description":"Color/Mono"}
,"$C022":{"Name":"TBCOLOR" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RG" ,"Description":"Screen Color: Low Nibble is BG, High Nibble is Text"}
,"$C023":{"Name":"VGCINT" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RG" ,"Description":"Video Graphics Controller Interrupts: b0-2=ext,scan,1sec enable b4-7=ext,scan,1sec,VGC"}
,"$C024":{"Name":"MOUSEDATA" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RG" ,"Description":"Mouse Data: High Bit is Button, Other Bits are Movement"}
,"$C025":{"Name":"KEYMODREG" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RG" ,"Description":"Modifier Keys: Bit 7: Command, Bit 6: Option, Bit 5: NotUsed, Bit 4: Keypad, Bit 3: Repeat,  Bit 2: Caps, Bit 1: Control, Bit 0: Shift"}
,"$C026":{"Name":"DATAREG" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RG" ,"Description":"ADB Command/Data b0-2=# b3=valid b4=clr buf b5=reboot b6=abort b7=status"}
,"$C027":{"Name":"KMSTATUS" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RG" ,"Description":"ADB Status: b0=cmdFull b1=mouseX b2=keyIntr b3=key b4=cmdIntr b5=data 6=mouseInt 7=mouse"}
,"$C028":{"Name":"ROMBANK" ,"SYScode":"" ,"Range":"HI" ,"Behaviors":"" ,"Description":"ROM bank select toggle"}
,"$C029":{"Name":"NEWVIDEO" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RG" ,"Description":"New Video: 129=SHR, 1=None, Bit 6=Linearize, Bit 5=BW"}
,"$C02B":{"Name":"LANGSEL" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"" ,"Description":"Bit 3=Secondary Bit 4=50Hz Bits 5-7=Display Language"}
,"$C02C":{"Name":"CHARROM" ,"SYScode":"" ,"Range":"HI" ,"Behaviors":"" ,"Description":"Addr for test mode read of character ROM"}
,"$C02D":{"Name":"SLTROMSEL" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"" ,"Description":"Slot Register; Bits 1-7=use slot card"}
,"$C02E":{"Name":"VERTCNT" ,"SYScode":"" ,"Range":"HI" ,"Behaviors":"" ,"Description":"Addr for read of video cntr bits V5-VB"}
,"$C02F":{"Name":"HORIZCNT" ,"SYScode":"" ,"Range":"HI" ,"Behaviors":"" ,"Description":"Addr for read of video cntr bits VA-H0"}
,"$C030":{"Name":"48200 SPKR" ,"SYScode":"A2,A2P,A2PE,A2JP<br>,A2B,A2E,A2Ee,A2eP<br>,A2c,A2cM,A3,A3P<br>,A3R,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RD" ,"Description":"Toggle Speaker"}
,"$C031":{"Name":"DISKREG" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"" ,"Description":"Disk Interface: Bit 6=3.5 Bit 7=RWHead 1"}
,"$C032":{"Name":"SCANINT" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RG" ,"Description":"VGC Interrupt-Clear"}
,"$C033":{"Name":"CLOCKDATA" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"" ,"Description":"Interface to Battery RAM (undocumented)"}
,"$C034":{"Name":"CLOCKCTL" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"" ,"Description":"b0-3=borderColor b5=stopBit b6=read b7=start"}
,"$C035":{"Name":"SHADOW" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"" ,"Description":"Inhibit Shadowing: Bit 6: I/O Memory, Bit 5: Alternate, Display Mode, Bit 4: Auxilary HGR, Bit 3: Super HiRes, Bit 2: HiRes, Page 2, Bit 1: HiRes Page 1, Bit 0: Text/LoRes"}
,"$C036":{"Name":"CYAREG" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"" ,"Description":"Bits 0-3=Disk Detect Bit 4=Shadow All Banks Bit 7=Fast"}
,"$C037":{"Name":"BMAREG" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"" ,"Description":"Bit 5=BW"}
,"$C038":{"Name":"SCCBREG" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"" ,"Description":"SCC Command Channel B"}
,"$C039":{"Name":"SCCAREG" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"" ,"Description":"SCC Command Channel A"}
,"$C03A":{"Name":"SCCBDATA" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"" ,"Description":"SCC Data Channel B"}
,"$C03B":{"Name":"SCCADATA" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"" ,"Description":"SCC Data Channel A"}
,"$C03C":{"Name":"SOUNDCTL" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RG" ,"Description":"Sound Settings: Bits 0-3=Volume Bit 5=AutoIncr Bit 6=RAM Bit 7=Busy"}
,"$C03D":{"Name":"SOUNDDATA" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"" ,"Description":"Sound Data"}
,"$C03E":{"Name":"SOUNDADRL" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"" ,"Description":"Address Pointer L"}
,"$C03F":{"Name":"SOUNDADRH" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"" ,"Description":"Address Pointer H"}
,"$C040":{"Name":"STROBE" ,"SYScode":"A2,A2P,A2PE,A2JP<br>,A2B,A2E,A2Ee,A2eP" ,"Range":"HI" ,"Behaviors":"RD" ,"Description":"Game I/O Strobe Output"}
,"$C040":{"Name":"RDXYMSK" ,"SYScode":"A2c,A2cM" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Read X0/Y0 Interrupt"}
,"$C040":{"Name":"BEEPER" ,"SYScode":"A3,A3P,A3R" ,"Range":"HI" ,"Behaviors":"RD" ,"Description":"Sound hardware beeperC041 RDVBLMSK       C    R7  Read VBL Interrupt"}
,"$C042":{"Name":"RDX0EDGE" ,"SYScode":"A2c,A2cM" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Read X0 Edge Selector"}
,"$C043":{"Name":"RDY0EDGE" ,"SYScode":"A2c,A2cM" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Read Y0 Edge Selector"}
,"$C044":{"Name":"MMDELTAX" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RG" ,"Description":"Mega II Mouse Delta Movement X"}
,"$C045":{"Name":"MMDELTAY" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RG" ,"Description":"Mega II Mouse Delta Movement Y"}
,"$C046":{"Name":"DIAGTYPE" ,"SYScode":"" ,"Range":"HI" ,"Behaviors":"" ,"Description":"Self or Burn-In diagdistics: Bit 7=burn-in diag"}
,"$C046":{"Name":"INTFLAG" ,"SYScode":"" ,"Range":"HI" ,"Behaviors":"" ,"Description":"b0=IRQ b1=MMmov b2=MMbut b3=VBL b4=qsec b5=AN3 b6=mouse was down b7=mouse is down"}
,"$C047":{"Name":"CLRVBLINT" ,"SYScode":"" ,"Range":"HI" ,"Behaviors":"" ,"Description":"Clear VBL Interrupt"}
,"$C048":{"Name":"CLRXYINT" ,"SYScode":"" ,"Range":"HI" ,"Behaviors":"" ,"Description":"Clear MM Interrupt"}
,"$C048":{"Name":"RSTXY" ,"SYScode":"A2c,A2cM" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"Reset X and Y Interrupts"}
,"$C04E":{"Name":"CHRDIS" ,"SYScode":"A3,A3P,A3R" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"Character Ram Disable"}
,"$C04F":{"Name":"EMUBYTE" ,"SYScode":"" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"Emulation ID byte: write once, then read once for program being used, read again for version number. $FE=Bernie, $16=Sweet16, $4B=KEGS, $AB=Appleblossom"}
,"$C04F":{"Name":"CHREN" ,"SYScode":"A3,A3P,A3R" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"Character Ram Enable"}
,"$C050":{"Name":"TXTCLR" ,"SYScode":"A2,A2P,A2PE,A2JP<br>,A2B,A2E,A2Ee,A2eP<br>,A2c,A2cM,A3,A3P<br>,A3R,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"Display Graphics"}
,"$C051":{"Name":"TXTSET" ,"SYScode":"A2,A2P,A2PE,A2JP<br>,A2B,A2E,A2Ee,A2eP<br>,A2c,A2cM,A3,A3P<br>,A3R,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"Display Text"}
,"$C052":{"Name":"MIXCLR" ,"SYScode":"A2,A2P,A2PE,A2JP<br>,A2B,A2E,A2Ee,A2eP<br>,A2c,A2cM,A3,A3P<br>,A3R,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"Display Full Screen"}
,"$C053":{"Name":"MIXSET" ,"SYScode":"A2,A2P,A2PE,A2JP<br>,A2B,A2E,A2Ee,A2eP<br>,A2c,A2cM,A3,A3P<br>,A3R,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"Display Split Screen"}
,"$C054":{"Name":"TXTPAGE1" ,"SYScode":"A2,A2P,A2PE,A2JP<br>,A2B,A2E,A2Ee,A2eP<br>,A2c,A2cM,A3,A3P<br>,A3R,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"Display Page 1"}
,"$C055":{"Name":"TXTPAGE2" ,"SYScode":"A2,A2P,A2PE,A2JP<br>,A2B,A2E,A2Ee,A2eP<br>,A2c,A2cM,A3,A3P<br>,A3R,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"If 80STORE Off: Display Page 2"}
,"$C056":{"Name":"LORES" ,"SYScode":"A2,A2P,A2PE,A2JP<br>,A2B,A2E,A2Ee,A2eP<br>,A2c,A2cM,A3,A3P<br>,A3R,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"Display LoRes Graphics"}
,"$C057":{"Name":"HIRES" ,"SYScode":"A2,A2P,A2PE,A2JP<br>,A2B,A2E,A2Ee,A2eP<br>,A2c,A2cM,A3,A3P<br>,A3R,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"Display HiRes Graphics"}
,"$C058":{"Name":"CLRAN0" ,"SYScode":"A2,A2P,A2PE,A2JP<br>,A2B,A2E,A2Ee,A2eP<br>,A3,A3P,A3R,A2G3<br>,A2GS" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"If IOUDIS off: Annunciator 0 Off"}
,"$C058":{"Name":"DISXY" ,"SYScode":"A2c,A2cM" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"If IOUDIS on: Mask X0/Y0 Move Interrupts"}
,"$C059":{"Name":"SETAN0" ,"SYScode":"A2,A2P,A2PE,A2JP<br>,A2B,A2E,A2Ee,A2eP<br>,A3,A3P,A3R,A2G3<br>,A2GS" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"If IOUDIS off: Annunciator 0 On"}
,"$C059":{"Name":"ENBXY" ,"SYScode":"A2c,A2cM" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"If IOUDIS on: Allow X0/Y0 Move Interrupts"}
,"$C05A":{"Name":"CLRAN1" ,"SYScode":"A2,A2P,A2PE,A2JP<br>,A2B,A2E,A2Ee,A2eP<br>,A3,A3P,A3R,A2G3<br>,A2GS" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"If IOUDIS off: Annunciator 1 Off"}
,"$C05A":{"Name":"DISVBL" ,"SYScode":"A2c,A2cM" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"If IOUDIS on: Disable VBL Interrupts"}
,"$C05B":{"Name":"SETAN1" ,"SYScode":"A2,A2P,A2PE,A2JP<br>,A2B,A2E,A2Ee,A2eP<br>,A3,A3P,A3R,A2G3<br>,A2GS" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"If IOUDIS off: Annunciator 1 On"}
,"$C05B":{"Name":"ENVBL" ,"SYScode":"A2c,A2cM" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"If IOUDIS on: Enable VBL Interrupts"}
,"$C05C":{"Name":"CLRAN2" ,"SYScode":"A2,A2P,A2PE,A2JP<br>,A2B,A2E,A2Ee,A2eP<br>,A3,A3P,A3R,A2G3<br>,A2GS" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"If IOUDIS off: Annunciator 2 Off"}
,"$C05C":{"Name":"X0EDGE" ,"SYScode":"A2c,A2cM" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"If IOUDIS on: Interrupt on X0 Rising"}
,"$C05D":{"Name":"SETAN2" ,"SYScode":"A2,A2P,A2PE,A2JP<br>,A2B,A2E,A2Ee,A2eP<br>,A3,A3P,A3R,A2G3<br>,A2GS" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"If IOUDIS off: Annunciator 2 On"}
,"$C05D":{"Name":"X0EDGE" ,"SYScode":"A2c,A2cM" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"If IOUDIS on: Interrupt on X0 Falling"}
,"$C05E":{"Name":"CLRAN3" ,"SYScode":"A2,A2P,A2PE,A2JP<br>,A2B,A2E,A2Ee,A2eP<br>,A3,A3P,A3R,A2G3<br>,A2GS" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"If IOUDIS off: Annunciator 3 Off"}
,"$C05E":{"Name":"Y0EDGE" ,"SYScode":"A2c,A2cM" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"If IOUDIS on: Interrupt on Y0 Rising"}
,"$C05E":{"Name":"DHIRESON" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A3,A3P,A3R<br>,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"In 80-Column Mode: Double Width Graphics"}
,"$C05F":{"Name":"SETAN3" ,"SYScode":"A2,A2P,A2PE,A2JP<br>,A2B,A2E,A2Ee,A2eP<br>,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"If IOUDIS off: Annunciator 3 On"}
,"$C05F":{"Name":"Y0EDGE" ,"SYScode":"A2c,A2cM" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"If IOUDIS on: Interrupt on Y0 Falling"}
,"$C05F":{"Name":"DHIRESOFF" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"In 80-Column Mode: Single Width Graphics"}
,"$C060":{"Name":"TAPEIN" ,"SYScode":"A2,A2P,A2PE,A2JP<br>,A2B,A2E,A2Ee,A2eP" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Read Cassette Input"}
,"$C060":{"Name":"COL80SW" ,"SYScode":"A2c,A2cM,A3,A3P<br>,A3R" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Status of 80/40 Column Switch"}
,"$C060":{"Name":"BUTN3" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Switch Input 3"}
,"$C061":{"Name":"RDBTN0" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Switch Input 0 / Open Apple"}
,"$C062":{"Name":"BUTN1" ,"SYScode":"A2E,A2Ee,A2eP,A2G3<br>,A2GS" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Switch Input 1 / Solid Apple"}
,"$C063":{"Name":"RD63" ,"SYScode":"A2E,A2Ee,A2eP,A2G3<br>,A2GS" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Switch Input 2 / Shift Key"}
,"$C063":{"Name":"RDMOUBTN" ,"SYScode":"A2c,A2cM" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Bit 7 = Mouse Button Not Pressed"}
,"$C064":{"Name":"PADDL0" ,"SYScode":"A2,A2P,A2PE,A2JP<br>,A2B,A2E,A2Ee,A2eP<br>,A2c,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Analog Input 0"}
,"$C065":{"Name":"PADDL1" ,"SYScode":"A2,A2P,A2PE,A2JP<br>,A2B,A2E,A2Ee,A2eP<br>,A2c,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Analog Input 1"}
,"$C066":{"Name":"PADDL2" ,"SYScode":"A2,A2P,A2PE,A2JP<br>,A2B,A2E,A2Ee,A2eP<br>,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Analog Input 2"}
,"$C066":{"Name":"RDMOUX1" ,"SYScode":"A2c,A2cM" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Mouse Horiz Position"}
,"$C067":{"Name":"PADDL3" ,"SYScode":"A2,A2P,A2PE,A2JP<br>,A2B,A2E,A2Ee,A2eP<br>,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Analog Input 3"}
,"$C067":{"Name":"RDMOUY1" ,"SYScode":"A2c,A2cM" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Mouse Vert Position"}
,"$C068":{"Name":"STATEREG" ,"SYScode":"A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"RG" ,"Description":"b0=INTCXROM b1=ROMBANK b2=LCBNK2 b3=RDROM b4=RAMWRT b5=RAMRD b6=PAGE2 b7=ALTZP"}
,"$C06D":{"Name":"TESTREG" ,"SYScode":"" ,"Range":"HI" ,"Behaviors":"" ,"Description":"Test Mode Bit Register"}
,"$C06E":{"Name":"CLRTM" ,"SYScode":"" ,"Range":"HI" ,"Behaviors":"" ,"Description":"Clear Test Mode"}
,"$C06F":{"Name":"ENTM" ,"SYScode":"" ,"Range":"HI" ,"Behaviors":"" ,"Description":"Enable Test Mode"}
,"$C070":{"Name":"PTRIG" ,"SYScode":"A2E,A2Ee,A2eP" ,"Range":"HI" ,"Behaviors":"RD" ,"Description":"Analog Input Reset"}
,"$C070":{"Name":"PTRIG" ,"SYScode":"A2c,A2cM" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"Analog Input Reset + Reset VBLINT Flag"}
,"$C070":{"Name":"PTRIG" ,"SYScode":"A3,A3P,A3R" ,"Range":"HI" ,"Behaviors":"WR,RD" ,"Description":"Access Real Time Clock"}
,"$C073":{"Name":"BANKSEL" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM,A2G3,A2GS" ,"Range":"HI" ,"Behaviors":"WR" ,"Description":"Memory Bank Select for > 128K"}
,"$C077":{"Name":"BLOSSOM" ,"SYScode":"" ,"Range":"HI" ,"Behaviors":"WR" ,"Description":"Appleblossom Special I/O Address $C1=Install clock driver, $CC=Get time in input buffer, $CF=get time in ProDOS global page."}
,"$C078":{"Name":"BLOSSOM" ,"SYScode":"A2c,A2cM" ,"Range":"HI" ,"Behaviors":"WR" ,"Description":"Disable IOU Access"}
,"$C079":{"Name":"BLOSSOM" ,"SYScode":"A2c,A2cM" ,"Range":"HI" ,"Behaviors":"WR" ,"Description":"Enable IOU Access"}
,"$C07E":{"Name":"IOUDISON" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM" ,"Range":"HI" ,"Behaviors":"WR" ,"Description":"Disable IOU"}
,"$C07E":{"Name":"RDIOUDIS" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Status of IOU Disabling"}
,"$C07F":{"Name":"IOUDISOFF" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM" ,"Range":"HI" ,"Behaviors":"WR" ,"Description":"Enable IOU"}
,"$C07F":{"Name":"RDDHIRES" ,"SYScode":"A2E,A2Ee,A2eP,A2c<br>,A2cM" ,"Range":"HI" ,"Behaviors":"RD,BI" ,"Description":"Status of Double HiRes"}
}

const _CFG_PCODE = {
 "MS16K":{"NAME":"Microsoft 16K Language card" ,"IOrange":"$C08<sub>n</sub>0,$C08<sub>n</sub>F" ,"ROMrange":"" ,"LROMrange":"" ,"SLOTrange":"0" ,"SYScode":"A2,A2P,A2E" ,"Manuals":"[user_manual](https://mirrors.apple2.org.za/ftp.apple.asimov.net/documentation/hardware/storage/memory/Microsoft%20RAMCard%20-%20Manual.pdf)"}
,"DISKII":{"NAME":"Apple Disk II Floppy Disk Subsystem" ,"IOrange":"$C08<sub>n</sub>0,$C08<sub>n</sub>F" ,"ROMrange":"$C0<sub>n</sub>00,$C0<sub>n</sub>FF" ,"LROMrange":"" ,"SLOTrange":"1,2,3,4,5,6,7" ,"SYScode":"A2,A2P,A2E" ,"Manuals":"[user_manual](https://mirrors.apple2.org.za/Apple%20II%20Documentation%20Project/Peripherals/Disk%20Drives/Apple%20Disk%20II/Manuals/Apple%20Disk%20II%20Floppy%20Disk%20Subsystem%20-%20Installation%20and%20Operating%20Manual.pdf),[technical_manual](https://www.bigmessowires.com/2021/11/12/the-amazing-disk-ii-controller-card/) [deepdive](https://archive.org/details/Beneath_Apple_DOS_alt/page/n15/mode/2up?view=theater)"}
,"VIDEX":{"NAME":"Videx Videoterm 80 Column Display" ,"IOrange":"$C08<sub>n</sub>0,$C08<sub>n</sub>F" ,"ROMrange":"$C0<sub>n</sub>00,$C0<sub>n</sub>FF" ,"LROMrange":"$C800,$CFFF" ,"SLOTrange":"1,2,3,4,5,6,7" ,"SYScode":"A2,A2P,A2E"}
,"[SLOT#]":{"NAME":"PCODE" ,"IOrange":"DESCRIPTION"}
,":----:":{"NAME":":---------" ,"IOrange":":-----------------"}
,0:{"NAME":"MS16K" ,"IOrange":"[16K language card](https://github.com/RetroAppleJS/RetroAppleJS.github.io/blob/main/docs/PERIPHERALS.md#the-16k-language-cards)"}
,1:{"NAME":"" ,"IOrange":""}
,2:{"NAME":"" ,"IOrange":""}
,3:{"NAME":"VIDEX" ,"IOrange":""}
,4:{"NAME":"" ,"IOrange":""}
,5:{"NAME":"" ,"IOrange":""}
,6:{"NAME":"DISKII" ,"IOrange":""}
,7:{"NAME":"" ,"IOrange":""}
}

const _CFG_SLOT = {
 0:{"PCODE":"MS16K","IOrange":[0xC080,0xC08F],"ROMrange":[],"LROMrange":[] ,"DESCRIPTION":"[16K language card](https://github.com/RetroAppleJS/RetroAppleJS.github.io/blob/main/docs/PERIPHERALS.md#the-16k-language-cards)"}
,1:{"PCODE":"" ,"DESCRIPTION":""}
,2:{"PCODE":"" ,"DESCRIPTION":""}
,3:{"PCODE":"VIDEX","IOrange":[0xC0B0,0xC0BF],"ROMrange":[0xC060,0xC15F],"LROMrange":[0xC800,0xCFFF] ,"DESCRIPTION":""}
,4:{"PCODE":"" ,"DESCRIPTION":""}
,5:{"PCODE":"" ,"DESCRIPTION":""}
,6:{"PCODE":"DISKII","IOrange":[0xC0E0,0xC0EF],"ROMrange":[0xC0C0,0xC1BF],"LROMrange":[] ,"DESCRIPTION":""}
,7:{"PCODE":"" ,"DESCRIPTION":""}
}

const _CFG = {"SYS":{"A2":false,"A2P":true,"A2E":false,"A2C":false},"PCODE":_CFG_PCODE,"SLOT":_CFG_SLOT};

const _CFG_CHROMA = {
 0:{"COL_num":"" ,"COL_name":"FULL-COLOR"}
,1:{"COL_num":"#FFFFFF" ,"COL_name":"B&W"}
,2:{"COL_num":"#A0FFF0" ,"COL_name":"GREEN"}
,3:{"COL_num":"#FCE7A1" ,"COL_name":"AMBER"}
}

var _TABS = {
"tab1":{"title":"Emulator","DEF_SYS":"A2P"}
,"tab2":{"title":"Assembler","DEF_SYS":"A2P"}
,"tab3":{"title":"Debugger","DEF_SYS":"A2P"}
,"tab4":{"title":"Manual","DEF_SYS":"A2P"}
}

const _CFG_TFUNCTION = {
 ".eq":{"COMPILER":"SourceGen" ,"REGXEP_INPUT":"(^[^;]*)(\\.eq |\\.EQ )(.+)" ,"REGEXP_OUTPUT":"'$1EQU$3'" ,"DESCRIPTION":"Replace .eq   by EQU until ;"}
,".var":{"COMPILER":"SourceGen" ,"REGXEP_INPUT":"(^[^;]*)(\\.var |\\.VAR )(.+)" ,"REGEXP_OUTPUT":"'$1EQU$3'" ,"DESCRIPTION":"Replace .var  by EQU until ;"}
,".org":{"COMPILER":"SourceGen" ,"REGXEP_INPUT":"(^[^;]*)(\\.org |\\.ORG )(.+)" ,"REGEXP_OUTPUT":"'$1ORG$3'" ,"DESCRIPTION":"Replace .org  by ORG until ;"}
,".str":{"COMPILER":"SourceGen" ,"REGXEP_INPUT":"(^[^;]*)(\\.str |\\.STR )(.+)" ,"REGEXP_OUTPUT":"'$1ASC$3'" ,"DESCRIPTION":"Replace .str  by ASC until ;"}
,".bulk":{"COMPILER":"SourceGen" ,"REGXEP_INPUT":"\\x20.bulk\\x20([\\s\\S]*)$" ,"REGEXP_OUTPUT":"'HEX '+x.split('.bulk')[1].replace(/[,$]/g,' ').replace(/\\s\\s+/g,' ').toUpperCase()" ,"DESCRIPTION":"Replace .bulk by HEX, remove strings and commas"}
,"+":{"COMPILER":"SourceGen" ,"REGXEP_INPUT":"\\x20\\+\\x20([\\s\\S]*)$" ,"REGEXP_OUTPUT":"'HEX '+x.split(' + ')[1].replace(/[,$]/g,' ').replace(/\\s\\s+/g,' ').toUpperCase()" ,"DESCRIPTION":"Replace + by HEX, remove strings and commas"}
,".fill":{"COMPILER":"SourceGen" ,"REGXEP_INPUT":".fill\\x20([\\s\\S]*)$" ,"REGEXP_OUTPUT":"'HEX'+(' '+x.split(',')[1].replace(/[ \\n\\$]/g,'')).toUpperCase().repeat(x.split(',')[0].replace(/[^0-9]/g,''))+' '" ,"DESCRIPTION":"Substitute .fill by HEX array"}
,"remove {..}":{"COMPILER":"SourceGen" ,"REGXEP_INPUT":"\\{[^{}]*\\}" ,"REGEXP_OUTPUT":"''" ,"DESCRIPTION":"Remove everything between accolades"}
,"*":{"COMPILER":"SourceGen" ,"REGXEP_INPUT":"^\\*" ,"REGEXP_OUTPUT":"';*'" ,"DESCRIPTION":"Add semicolumn before any line starting with asterisk"}
,"upper_before;":{"COMPILER":"SourceGen" ,"REGXEP_INPUT":"^[^;^n]*" ,"REGEXP_OUTPUT":"x.toUpperCase()" ,"DESCRIPTION":"Uppercase everything until bumping into a semicolumn"}
}

var _DOCS = new Array();
_DOCS["EMULATOR"] = "<h2 id=\"emulator-user-instructions\">EMULATOR User Instructions</h2><hr>"
+"<p><img src=\"https://github.com/RetroAppleJS/RetroAppleJS.github.io/raw/main/res/appleIIplus_bck_650.png?raw=true\" width=35% align=\"left\" /></p>"
+"<p>While the end-user experience with this emulator hardly differs from the real hardware, there are some essential adaptations, mostly to accomodate contemporary user expecations, like copy-paste.  There is no point in creating an emulator that is completely offline like it was mostly the case in it's pre-internet era.  </p>"
+"<p>This small guide is leading you through the usability features of the emulator compared to the bare metal.  For all the other features, there is a huge body of <a href=\"https://mirrors.apple2.org.za/Apple%20II%20Documentation%20Project/Books/\">documentation</a> available, and for more specific details on the global architecture of this very emulator, please check out the following document: <a href=\"EMULATOR_ARCHITECTURE.md\">EMULATOR_ARCHITECTURE.md</a></p>"
+"<p>All the special functions and settings can be accessed on the right side the tab menu.</p>"
+"<h3 id=\"img-srcresdoc_emu_tools_menupngrawtrue-width2--alignleft-tools\"><img src=\"https://github.com/RetroAppleJS/RetroAppleJS.github.io/raw/main/res/doc_emu_tools_menu.png?raw=true\" width=2%  align=\"left\"/> TOOLS</h3>"
+"<p><strong>Pasteboard</strong>"
+"<br>"
+"<img src=\"https://github.com/RetroAppleJS/RetroAppleJS.github.io/raw/main/res/doc_emu_pasteboard_pane.png?raw=true\" width=25%  align=\"left\"/>"
+"<br></p>"
+"<ul>"
+"<li><strong>Paste</strong> any text into the emulator. This function senses the keyboard strobe address which reveals exactly when the Apple II hardware is ready to take a character from the keyboard, assuring the fastest data transfer rate.</li>"
+"<li><strong>txtCap</strong> to capture text screen #1 in the pasteboard.  This is actually a memory dump between $400-$5FF, but bytes are reordered logically to overcome the Apple II's chip saving design.</li>"
+"<li><strong>MemCap</strong> to bulk capture any byte stream between two addresses.</li>"
+"<li><strong>Clear</strong> as the text area can be used in both directions (import/export), it is important to clear it quickly.</li>"
+"</ul>"
+"<p><strong>CPU & Sound enablement</strong>"
+"<br>"
+"<img src=\"https://github.com/RetroAppleJS/RetroAppleJS.github.io/raw/main/res/doc_emu_CPU_pane.png?raw=true\" width=7.5%  align=\"left\"/>"
+"<br></p>"
+"<ul>"
+"<li><strong>Sound</strong> Speaker sound is turned off by default as browsers tend to reject unsolicited website sound.</li>"
+"<li><strong>Run/Pause</strong> Runs or pauses the CPU</li>"
+"<li><strong>Reset</strong> = warm boot</li>"
+"<li><strong>Restart</strong> = cold boot</li>"
+"</ul>"
+"<p><strong>Disk</strong>"
+"<br>"
+"<img src=\"https://github.com/RetroAppleJS/RetroAppleJS.github.io/raw/main/res/doc_emu_disk_pane.png?raw=true\" width=35%  align=\"left\"/>"
+"<br><br>"
+"The disk pane allows loading and ejecting up to two floppy disks in .DSK file format.  When writing or updating Apple II files on any of the given disk image, a new disk image can be saved including all the changes made so far.  As for now, the save function only supports saving .NIB format files.</p>"
+"<h3 id=\"img-srcresdoc_emu_settings_menupngrawtrue-width2--alignleft-settings\"><img src=\"https://github.com/RetroAppleJS/RetroAppleJS.github.io/raw/main/res/doc_emu_settings_menu.png?raw=true\" width=2%  align=\"left\"/> SETTINGS</h3>"
+"<p><strong>CPU speed settings</strong>"
+"<br>"
+"<img src=\"https://github.com/RetroAppleJS/RetroAppleJS.github.io/raw/main/res/doc_emu_system_pane.png?raw=true\" width=10%  align=\"left\"/>"
+"CPU speed can be modified in real-time by dragging the slider bar between 0% to 200%.  While it looks like a simple parameter, there are parallel threats that need to remain in sync according to the needs.  The virtual device for sound production needs to adapt it's sample rate according to the CPU clock rate.  At every slider update, the emulator thread is therefore effectively notifying the sound driver for this reason.  Also for graphics, when emulating graphics by means of the GPU, we need to mind keeping a refresh rate of approximately 25 frames per second, except While going down to a 10% CPU rate, we can but also must significantly slow down screen updates to free-up the emulator load for other important purposes like real-time CPU tracing, debugging and monitoring.</p>"
+"<p>The debugger can be enabled by sliding the bar to 0% after which the debug icon appears.  Just mind clicking this icon to start debugging.</p>"
+"<p><strong>Screen settings</strong></p>"
+"<p><strong>color mode</strong>"
+"<br>"
+"<img src=\"https://github.com/RetroAppleJS/RetroAppleJS.github.io/raw/main/res/doc_emu_system_pane.png?raw=true\" width=10%  align=\"left\"/> On the emulator's system pane, the colour pallet button allows cycling through colour modes (colour, black & white, green, amber). This button is handy wherever the Apple II colour encoding becomes disturbing (e.g. font display in HGR graphics). When hoovering over the pallette icon, a tooltip will indicate the actual colour mode in use. Please find coding documentation about \"color mode\" here <a href=\"EMULATOR_DEV.md\">EMULATOR_DEV.md</a></p>"
+"<p><strong>Keyboard features</strong></p>"
+"<p><img src=\"https://github.com/RetroAppleJS/RetroAppleJS.github.io/raw/main/res/appleIIplus_kbd_650.png?raw=true\" width=40% align=\"left\"/>  </p>"
+"<p><strong>physical keyboard</strong> and <strong>pop-up virtual keyboard</strong> can be used interchangably.<br>"
+"<strong>physical keyboard</strong> activates when clicking inside the area of the emulated screen.<br>"
+"<strong>virtual keyboard</strong> activates when hovering over the area of the virtual keyboard.<br>"
+"<strong>virtual keyboard</strong> by default is configured for mouse-driven host computers where SHIFT, CTRL and REPT keys toggle on/off by means of 2 mouse clicks. <br>"
+"<strong>white power light</strong> on virtual keyboard acts as a power button, which causes a cold-boot. (Instead of flip-switch located below the keyboard on a real Apple II) </p>"
+"<ul>"
+"<li><strong>insert disk</strong> icon allows loading any disk file found on the internet (.do, .dsk), after, perform a cold boot   <br>"
+"<em>note: mind that most Apple II disks do not self-boot, keeping a bootable disk image at hand reach is still required.</em>  </li>"
+"</ul>"
+"<p><strong>The 1MHz trick</strong>  <br>"
+"JavaScript does not provide 1µs timing precision, but we have a workaround.  The setInterval() function located in EMU_apple2main.js, which drives the main loop of our emulator, starts a new sequence every 100ms.  Instead of cycling one time through the CPU emulator every 1µs, we cycle 100K times every 0.1s or 100ms.  By this trick, we achieve exactly the same performance as a real Apple II at 1MHz (100K cycles/0.1).  Just, all 100K cycles are far from equally spread accross this 100ms loop.  Most CPU's nowadays, effortlessly execute all 100K cycles in less than 5ms, which all sounds good, until one needs to emulate 'sound'. Below diagram explains the 1MHz trick visually :</p>"
+"<pre><code>      <div style=width:800px><br>"
+"<br>"
+"                                    :                   100ms                   :      <br>"
+"                                    ┌──────────────────────────────────────────┐┌─────...    ┐<br>"
+"  setInterval(appleInterval(),100)  │                                          ││            │<br>"
+"  (outer loop)                    ──┘                                          └┘            │<br>"
+"                                    :                                           :            │<br>"
+"                                    :                                           :            │                                        <br>"
+"                                    :<5ms                                       :<5ms        ├>  EMULATED<br>"
+"                                    :◄───►                                      :◄───►<br>"
+"                                    ┌┬┬┬┬┐                                      ┌┬┬┬┬┐       │   CLOCK<br>"
+"                                    ││││││                                      ││││││       │  <br>"
+"          apple2plus.cycle(10000) ──┘100K└──────────────────────────────────────┘100K└─...   │<br>"
+"          (inner loop)              :cycles                                     :cycles      ┘<br>"
+"                                    :                                           :<br>"
+"                                    : 1µs                                       :<br>"
+"                                    :/                                          :<br>"
+"                                    ┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐┌┐       ┐<br>"
+"          real Apple II at 1MHz   ──┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└┘└...    ├>  HARDWARE<br>"
+"                                    :                 100K cycles               :            ┘   CLOCK<br>"
+"      </div></code></pre>"
+"<p><img src=\"http://www.plantuml.com/plantuml/png/ZOunJyCm48Lt_ugdJ21rE0yPs48g445YwifYdAjguTYMVMaGYFzEI8iQcDZkdhxtz3L5J9PnyChwQ5y1L7V3w8t4ZC6u01zZUWwFvcXsDhiasB5qGJWVZR-whc0AjeJ9oG69iuizD17Iw0lZfaRSxmiBIDaOh2lyTtvoeO_JQKQh75_68ci75mBdHM9XsXM3Kt8HpsmyRbFoZAw34UYdX_S5klybM9_rw6AdMXncZbIhbqDlvgmXjTLm1HM_iVrHLUsIVT16VyvCVVw_UKt_QMXQTLJ3eHy7_mK0\" alt=\"plantuml\" /></p>"
+"<p><strong>Deceivingly simple sound emulation</strong>  <br>"
+"The ability of the Apple II to produce a soft-switch-activated real-time 'click', transitioning the speaker voltage from 0V to 1V and back turned out tricky to mimic.  However simple sound production was designed on the Apple II, since 1997, JavaScript maintained <strong>1ms</strong> as the <strong>highest achievable timing accuracy</strong>.  While the 6502 CPU was clocked at approximately 1MHz, emulating a CPU-driven speaker theoretically needs a 1000-fold more accuracy than JavaScript can provide today.  In other words, JavaScript cannot implement any timer-driven sound above it's nyquist maximum of 500Hz, while a typical Apple II Beep sound is 1KHz.</p>"
+"<p>W3C recently started to worry about this limitation by proposing a new spec called <a href=\"https://w3c.github.io/hr-time/\">\"High Resolution Time\"</a> or <a href=\"https://w3c.github.io/hr-time/\">hr-time</a>, but because of alleged malicious capability like [CACHE-ATTACKS] and [SPECTRE], W3C recommends to purposefully mess-up it's timers accuracy by reducing resolution, adding jitter, or by any other means that probably never will provide us anything near to 1µs clock accuracy.</p>"
+"<p>Since we may never reach this accuracy, we have to think about how hard we need 1µs clock accuracy for sound emulation after all.  We can toggle the Apple II speaker on and off by reading the $C030 address location as often as we want.  But, knowing that frequencies above 20000Hz remain inaudible, we should mind about toggling the speaker only 40000 times per second = once every 25µs.  The \"coarsen time\" add-on proposed by W3C will by default deliver 100µs accuracy, but by setting the flag crossOriginIsolatedCapability = true, it may deliver 5µs.  In practice, for real-time sound emulation, we only need a maximum of 25µs timer accuracy, which <a href=\"https://w3c.github.io/hr-time/\">hr-time</a> will likely provide. </p>"
+"<p>The next best method for sound emulation is the scheduling/buffering approach; Chromium authors developed in 2017 a modern thread model for JavaScript audio - called <a href=\"https://retroapplejs.github.io/tools/AudioWorkletJS.html\">AudioWorklet</a> - that became a cross-browser standard by now. Real-time audio remains impossible, but a buffering method using AudioWorklets provides reasonable jitter stability, and reasonably short buffer delays.</p>"
+"<p>Sound buffering was conveniently aligned to the existing emulator intervals of 100ms or 10/second, which unfortunately comes with the same amount of delay.  While during one emulator interval, the CPU performs about 100K clock cycles, we can rationalise emulator load and memory by sampling the speakers I/O address $C030 only once in a while.  In our previous findings, 25µs accuracy would be largely sufficient, and through experimentation, even 45µs turned out sufficient.  The AudioWorklet (for now) imposes a fixed-size audio buffer block size of 128 samples.  Finding the closest integer amount of blocks at an integer sample rate, that would fit in 100ms required some additional experimentation expressed in a table right here <a href=\"https://retroapplejs.github.io/tools/AudioWorkletJS.html\">AudioWorklet</a>.  Finally, buffering 17 blocks * 128 samples = 2176 samples at a sample rate of 21760 samples/s or 0.0217 MHz takes precisely 100ms to complete.  As a best guess, sampling the I/O address every 1MHz / 0.02176 MHz = 45.955 times; rounded up to 46 CPU clocks per sample, we achieve 99.90% sample accuracy. </p>"
+"<h2 id=\"appendix\">Appendix</h2><hr>"
+"<h3 id=\"memory-map\">Memory map</h3>"
+"<pre><code>      <div style=width:800px><br>"
+" FFFF ┌────────────────────────────────────┐                      ▲ <br>"
+"      │  Autostart ROM                     │  2K                  │<br>"
+"      │                                    │                      │<br>"
+" F800 ├────────────────────────────────────┤                      │  12K<br>"
+"      │                                    │                      │  ROM<br>"
+"      │                                    │                      │     <br>"
+"      │  Applesoft ROM                     │  10K                 │<br>"
+"      │                                    │                      │<br>"
+"      │                                    │                      ▼<br>"
+" D000 ├────────────────────────────────────┤                        <br>"
+"      │  I/O ROM/RAM                       │  2K                  ▲<br>"
+"      │                                    │                      │<br>"
+" C800 ├────────────────────────────────────┤                      │  4K<br>"
+"      │  I/O Ports                         │  2K                  │  I/O<br>"
+"      │                                    │                      ▼<br>"
+" C000 ├────────────────────────────────────┤                      <br>"
+"      │                                    │                      ▲     <br>"
+"      │                                    │                      │<br>"
+"      │                                    │                      │     <br>"
+"      │  Free                              │  24K                 │<br>"
+"      │                                    │                      │<br>"
+"      │                                    │                      │<br>"
+"      │                                    │                      │<br>"
+" 6000 ├────────────────────────────────────┤                      │<br>"
+"      │                                    │                      │     <br>"
+"      │  Hi-Res 2                          │  8K                  │<br>"
+"      │                                    │                      │<br>"
+"      │                                    │                      │<br>"
+" 4000 ├────────────────────────────────────┤                      │  48K<br>"
+"      │                                    │                      │  RAM   <br>"
+"      │  Hi-Res 1                          │  8K                  │<br>"
+"      │                                    │                      │          <br>"
+"      │                                    │                      │<br>"
+" 2000 ├────────────────────────────────────┤                      │<br>"
+"      │                                    │                      │     <br>"
+"      │  Free                              │  5K                  │<br>"
+"      │                                    │                      │<br>"
+" 0C00 ├────────────────────────────────────┤                      │<br>"
+"      │  Text & Lo-res graphics 2          │  1K                  │<br>"
+" 0800 ├────────────────────────────────────┤                      │<br>"
+"      │  Text & Lo-res graphics 1          │  1K                  │<br>"
+" 0400 ├────────────────────────────────────┤                      │<br>"
+"      │  System RAM  (zero page, stack..)  │  1K                  │<br>"
+" 0000 └────────────────────────────────────┘                      ▼</code></pre>"
+"<h3 id=\"hard-wired-keyboard-functions\">Hard-wired keyboard functions</h3>"
+"<p><img src=\"https://github.com/RetroAppleJS/RetroAppleJS.github.io/raw/main/res/appleIIplus_kbd_650.png?raw=true\" width=40% align=\"right\"/> </p>"
+"<p><strong>CTRL</strong> and <strong>SHIFT</strong> keys generate no codes by themselves, but only after the codes produced by other keys.</p>"
+"<p>The <strong>REPT</strong> key is pressed alone produces a duplicate of the last code that was generated.<br>"
+"If you press and hold down the <strong>REPT</strong> key while you are holding down a character key, it will act as if you are pressing that key repeatedly at a rate of 10 pressess each second. This repetition will cease when you release either the character key or <strong>REPT</strong>.</p>"
+"<p>The <strong>POWER</strong> light at the lower left-hand corner is an indicator lamp to show when the power to the Apple is on.<br>"
+"As the physical power switch is located below the keyboard, for convenience, we turned the <strong>POWER</strong> light into a cold boot button.</p>"
+"<table>"
+"<thead>"
+"<tr>"
+"<th id=\"keys_and_their_associated_ascii_codes\">Keys and their associated ASCII codes</th>"
+"</tr>"
+"</thead>"
+"<tbody>"
+"</tbody>"
+"</table>"
+"<table>"
+"<thead>"
+"<tr>"
+"<th id=\"key\" style=\"text-align:center;\">Key</th>"
+"<th id=\"alone\">Alone</th>"
+"<th id=\"ctrl\">CTRL</th>"
+"<th id=\"shift\">SHIFT</th>"
+"<th id=\"both\">Both</th>"
+"<th id=\"\"></th>"
+"<th id=\"key\" style=\"text-align:center;\">Key</th>"
+"<th id=\"alone\">Alone</th>"
+"<th id=\"ctrl\">CTRL</th>"
+"<th id=\"shift\">SHIFT</th>"
+"<th id=\"both\">Both</th>"
+"</tr>"
+"</thead>"
+"<tbody>"
+"<tr>"
+"<td style=\"text-align:center;\">space</td>"
+"<td>$A0</td>"
+"<td>$A0</td>"
+"<td>$A0</td>"
+"<td>$A0</td>"
+"<td></td>"
+"<td style=\"text-align:center;\">RETURN</td>"
+"<td>$8D</td>"
+"<td>$8D</td>"
+"<td>$8D</td>"
+"<td>$8D</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">0</td>"
+"<td>$B0</td>"
+"<td>$B0</td>"
+"<td>$B0</td>"
+"<td>$B0</td>"
+"<td></td>"
+"<td style=\"text-align:center;\">G</td>"
+"<td>$C7</td>"
+"<td>$87</td>"
+"<td>$C7</td>"
+"<td>$87</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">1!</td>"
+"<td>$B1</td>"
+"<td>$B1</td>"
+"<td>$A1</td>"
+"<td>$A1</td>"
+"<td></td>"
+"<td style=\"text-align:center;\">H</td>"
+"<td>$C8</td>"
+"<td>$88</td>"
+"<td>$C8</td>"
+"<td>$88</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">2\"</td>"
+"<td>$B2</td>"
+"<td>$B2</td>"
+"<td>$A2</td>"
+"<td>$A2</td>"
+"<td></td>"
+"<td style=\"text-align:center;\">I</td>"
+"<td>$C9</td>"
+"<td>$89</td>"
+"<td>$C9</td>"
+"<td>$89</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">3#</td>"
+"<td>$B3</td>"
+"<td>$B3</td>"
+"<td>$A3</td>"
+"<td>$A3</td>"
+"<td></td>"
+"<td style=\"text-align:center;\">J</td>"
+"<td>$CA</td>"
+"<td>$8A</td>"
+"<td>$CA</td>"
+"<td>$8A</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">4$</td>"
+"<td>$B4</td>"
+"<td>$B4</td>"
+"<td>$A4</td>"
+"<td>$A4</td>"
+"<td></td>"
+"<td style=\"text-align:center;\">K</td>"
+"<td>$CB</td>"
+"<td>$8B</td>"
+"<td>$CB</td>"
+"<td>$8B</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">5%</td>"
+"<td>$B5</td>"
+"<td>$B5</td>"
+"<td>$A5</td>"
+"<td>$A5</td>"
+"<td></td>"
+"<td style=\"text-align:center;\">L</td>"
+"<td>$CC</td>"
+"<td>$8C</td>"
+"<td>$CC</td>"
+"<td>$8C</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">6&</td>"
+"<td>$B6</td>"
+"<td>$B6</td>"
+"<td>$A6</td>"
+"<td>$A6</td>"
+"<td></td>"
+"<td style=\"text-align:center;\">M</td>"
+"<td>$CD</td>"
+"<td>$8D</td>"
+"<td>$DD</td>"
+"<td>$9D</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">7'</td>"
+"<td>$B7</td>"
+"<td>$B7</td>"
+"<td>$A7</td>"
+"<td>$A7</td>"
+"<td></td>"
+"<td style=\"text-align:center;\">N^</td>"
+"<td>$CE</td>"
+"<td>$8E</td>"
+"<td>$DE</td>"
+"<td>$9E</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">8(</td>"
+"<td>$B8</td>"
+"<td>$B8</td>"
+"<td>$A8</td>"
+"<td>$A8</td>"
+"<td></td>"
+"<td style=\"text-align:center;\">O</td>"
+"<td>$CF</td>"
+"<td>$8F</td>"
+"<td>$CF</td>"
+"<td>$8F</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">9)</td>"
+"<td>$B9</td>"
+"<td>$B9</td>"
+"<td>$A9</td>"
+"<td>$A9</td>"
+"<td></td>"
+"<td style=\"text-align:center;\">P@</td>"
+"<td>$D0</td>"
+"<td>$90</td>"
+"<td>$C0</td>"
+"<td>$80</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">:*</td>"
+"<td>$BA</td>"
+"<td>$BA</td>"
+"<td>$AA</td>"
+"<td>$AA</td>"
+"<td></td>"
+"<td style=\"text-align:center;\">Q</td>"
+"<td>$D1</td>"
+"<td>$91</td>"
+"<td>$D1</td>"
+"<td>$91</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">;+</td>"
+"<td>$BB</td>"
+"<td>$BB</td>"
+"<td>$AB</td>"
+"<td>$AB</td>"
+"<td></td>"
+"<td style=\"text-align:center;\">R</td>"
+"<td>$D2</td>"
+"<td>$92</td>"
+"<td>$D2</td>"
+"<td>$92</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">,<</td>"
+"<td>$AC</td>"
+"<td>$AC</td>"
+"<td>$BC</td>"
+"<td>$BC</td>"
+"<td></td>"
+"<td style=\"text-align:center;\">S</td>"
+"<td>$D3</td>"
+"<td>$93</td>"
+"<td>$D3</td>"
+"<td>$93</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">-=</td>"
+"<td>$AD</td>"
+"<td>$AD</td>"
+"<td>$BD</td>"
+"<td>$BD</td>"
+"<td></td>"
+"<td style=\"text-align:center;\">T</td>"
+"<td>$D4</td>"
+"<td>$94</td>"
+"<td>$D4</td>"
+"<td>$94</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">.></td>"
+"<td>$AE</td>"
+"<td>$AE</td>"
+"<td>$BE</td>"
+"<td>$BE</td>"
+"<td></td>"
+"<td style=\"text-align:center;\">U</td>"
+"<td>$D5</td>"
+"<td>$95</td>"
+"<td>$D5</td>"
+"<td>$95</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">/?</td>"
+"<td>$AF</td>"
+"<td>$AF</td>"
+"<td>$BF</td>"
+"<td>$BF</td>"
+"<td></td>"
+"<td style=\"text-align:center;\">V</td>"
+"<td>$D6</td>"
+"<td>$96</td>"
+"<td>$D6</td>"
+"<td>$96</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">A</td>"
+"<td>$C1</td>"
+"<td>$81</td>"
+"<td>$C1</td>"
+"<td>$81</td>"
+"<td></td>"
+"<td style=\"text-align:center;\">W</td>"
+"<td>$D7</td>"
+"<td>$97</td>"
+"<td>$D7</td>"
+"<td>$97</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">B</td>"
+"<td>$C2</td>"
+"<td>$82</td>"
+"<td>$C2</td>"
+"<td>$82</td>"
+"<td></td>"
+"<td style=\"text-align:center;\">X</td>"
+"<td>$D8</td>"
+"<td>$98</td>"
+"<td>$D8</td>"
+"<td>$98</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">C</td>"
+"<td>$C3</td>"
+"<td>$83</td>"
+"<td>$C3</td>"
+"<td>$83</td>"
+"<td></td>"
+"<td style=\"text-align:center;\">Y</td>"
+"<td>$D9</td>"
+"<td>$99</td>"
+"<td>$D9</td>"
+"<td>$99</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">D</td>"
+"<td>$C4</td>"
+"<td>$84</td>"
+"<td>$C4</td>"
+"<td>$84</td>"
+"<td></td>"
+"<td style=\"text-align:center;\">Z</td>"
+"<td>$DA</td>"
+"<td>$9A</td>"
+"<td>$DA</td>"
+"<td>$9A</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">E</td>"
+"<td>$C5</td>"
+"<td>$85</td>"
+"<td>$C5</td>"
+"<td>$85</td>"
+"<td></td>"
+"<td style=\"text-align:center;\">-></td>"
+"<td>$88</td>"
+"<td>$88</td>"
+"<td>$88</td>"
+"<td>$88</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">F</td>"
+"<td>$C6</td>"
+"<td>$86</td>"
+"<td>$C6</td>"
+"<td>$86</td>"
+"<td></td>"
+"<td style=\"text-align:center;\"><-</td>"
+"<td>$95</td>"
+"<td>$95</td>"
+"<td>$95</td>"
+"<td>$95</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\"></td>"
+"<td></td>"
+"<td></td>"
+"<td></td>"
+"<td></td>"
+"<td></td>"
+"<td style=\"text-align:center;\">ESC</td>"
+"<td>$9B</td>"
+"<td>$9B</td>"
+"<td>$9B</td>"
+"<td>$9B</td>"
+"</tr>"
+"</tbody>"
+"</table>"
+"<h3 id=\"firmware-keyboard-functions\">Firmware keyboard functions</h3>"
+"<p><strong>CTRL-S</strong> triggers the <strong>STOP-LIST</strong> feature, which is pausing any screen text printing at every RETURN code. Screen printing resumes after pressing any key, unless <strong>CTRL-C</strong> is pressed, which breaks screen printing and goes back to the program that is sending output.</p>"
+"<p><strong>CTRL-G</strong> does not print any character, instead it produces a tone of 1000Hz in the speaker during 0.1s.</p>"
+"<p><strong>CTRL-X</strong> breaks an input line, forgets all what was typed and starts a new input line.</p>"
+"<table>"
+"<thead>"
+"<tr>"
+"<th id=\"escape_codes\">Escape codes</th>"
+"</tr>"
+"</thead>"
+"<tbody>"
+"</tbody>"
+"</table>"
+"<p>When pressing the <strong>ESC</strong> key, Apples firmware goes into <em>escape mode</em>. In this mode, 11 keys have separate meanings called <em>escape codes</em>.</p>"
+"<p><strong>ESC A</strong>"
+": moves cursor one space forward  <br>"
+"<strong>ESC B</strong>"
+": moves cursor one space back  <br>"
+"<strong>ESC C</strong>"
+": moves cursor one line down  <br>"
+"<strong>ESC D</strong>"
+": moves cursor one line up  <br>"
+"<strong>ESC E</strong>"
+": clear until end of line while screen text printing  <br>"
+"<strong>ESC F</strong>"
+": clear until end of screen while screen text printing  <br>"
+"<strong>ESC @</strong>"
+": home and clear - clears entire window and places cursor in upper left corner  <br>"
+"<strong>ESC K</strong>"
+": same as ESC A - move cursor one right  <br>"
+"<strong>ESC J</strong>"
+": same as ESC B - move cursor one left  <br>"
+"<strong>ESC M</strong>"
+": same as ESC C - move cursor one down  <br>"
+"<strong>ESC I</strong>"
+": same as ESC D - move cursor one up   </p>"

_DOCS["ZEROPAGE_APPLE2PLUS"] = "<p>$00-$05 - ???  <br>"
+"  $06-$09 - Free Space  <br>"
+"  $0A-$0C - JMP to USR() User Function Routine  <br>"
+"  $0D-$17 - ???  <br>"
+"  $18     - First Data Track  <br>"
+"  $19     - First Data Sector  <br>"
+"  $1A-$1B - Shape Pointer for DRAW  <br>"
+"  $1C     - Last COLOR Used  <br>"
+"  $1D-$1E - Free Space  <br>"
+"  $1F     - ???  <br>"
+"  $20     - Left Margin (0 - 39/79, 0 is default)  <br>"
+"  $21     - Width (1 - 40/80, 40 is default, 0 crashes Applesoft)  <br>"
+"  $22     - Top Margin (0 - 23, 0 is default, 20 in graphics mode)  <br>"
+"  $23     - Bottom Margin (0 - 23, 23 is default)  <br>"
+"  $24     - Horizontal Cursor Position (0 - 39/79)  <br>"
+"  $25     - Vertical Cursor Position (0 - 23)  <br>"
+"  $26-$27 - Address of Byte Containing X,Y  <br>"
+"  $28-$29 - Base Address of Text Cursor's Position  <br>"
+"  $2A     - ???  <br>"
+"  $2B     - Boot Slot * 16  <br>"
+"  $2C     - Lo-Res HLIN/VLIN Endpoint  <br>"
+"  $2D-$2F - ???  <br>"
+"  $30     - COLOR Value * 17  <br>"
+"  $31     - ???  <br>"
+"  $32     - Text Mask ($FF = Normal, $7F = Inverse, $3F = Flashing)  <br>"
+"  $33     - Prompt Character  <br>"
+"  $34-$35 - ???  <br>"
+"  $36-$37 - Address of Output Routine  <br>"
+"  $38-$39 - Address of Input Routine  <br>"
+"  $3A-$4F - ???  <br>"
+"  $50-$51 - Result of the Conversion of the FAC to a 16-Bit Integer  <br>"
+"  $52-$66 - ???  <br>"
+"  $67-$68 - Address of Beginning of BASIC Program ($0801 is default)  <br>"
+"  $69-$6A - Address of Beginning of BASIC Variables  <br>"
+"  $6B-$6C - Address of Beginning of BASIC Arrays  <br>"
+"  $6D-$6E - Address of End of BASIC Variables  <br>"
+"  $6F-$70 - Address of End of String Data  <br>"
+"  $71-$72 - Address to Move String To  <br>"
+"  $73-$74 - Address of Beginning of String Data  <br>"
+"  $75-$76 - Current Line Number Being Executed  <br>"
+"  $77-$78 - Line Number Where END or STOP or BREAK Occurred  <br>"
+"  $79-$7A - Address of Line Number Being Executed  <br>"
+"  $7B-$7C - Current Address of DATA  <br>"
+"  $7D-$7E - Next Address of DATA  <br>"
+"  $7F-$80 - Address of Input or Data  <br>"
+"  $81-$82 - Last Used Variable's Name  <br>"
+"  $83-$84 - Last Used Variable's Address  <br>"
+"  $85-$9A - ???  <br>"
+"  $9B-$9C - Pointer for $D61A and $F7D9  <br>"
+"  $9D-$A3 - Floating Point Accumulator (FAC)  <br>"
+"  $A4     - ???  <br>"
+"  $A5-$AB - Floating Point Argument Register (ARG)  <br>"
+"  $AC-$AE - ???  <br>"
+"  $AF-$B0 - Address of End of BASIC Program  <br>"
+"  $B1-$B6 - Subroutine to Increase the String Data Pointer  <br>"
+"  $B7-$BE - Subroutine to Return the Character Pointed to by the String Data Pointer  <br>"
+"  $BF-$CD - ???  <br>"
+"  $CE-$CF - Free Space  <br>"
+"  $D0-$D3 - ???  <br>"
+"  $D4     - Error Code Flag  <br>"
+"  $D5-$D6 - ???  <br>"
+"  $D7     - Free Space  <br>"
+"  $D8     - Error Flag (Bit 7 Set if an Error Handler is Used)  <br>"
+"  $D9     - ???  <br>"
+"  $DA-$DB - Line Number Where Error Occurred  <br>"
+"  $DC-$DD - ???  <br>"
+"  $DE     - Error Code  <br>"
+"  $DF     - ???  <br>"
+"  $E0-$E1 - Horizontal Coordinate of HPLOT  <br>"
+"  $E2     - Vertical Coordinate of HPLOT  <br>"
+"  $E3     - Free Space  <br>"
+"  $E4     - HCOLOR Value (0=0, 1=42, 2=85, 3=127, 4=128, 5=170, 6=213, 7=255)  <br>"
+"  $E5     - ???  <br>"
+"  $E6     - High Byte of Address of First Byte of Where HGR is Plotted  <br>"
+"  $E7     - SCALE Value (0 = 256)  <br>"
+"  $E8-$E9 - Address of Shape Table  <br>"
+"  $EA     - DRAW/XDRAW Collision Count  <br>"
+"  $EB-$EF - Free Space  <br>"
+"  $F0     - ???  <br>"
+"  $F1     - SPEED Value (Subtracted From 256)  <br>"
+"  $F2     - ???  <br>"
+"  $F3     - Text OR Mask for Flashing Text  <br>"
+"  $F4-$F5 - Address of Error Handler (Line Number after ONERR GOTO)  <br>"
+"  $F6-$F8 - ???  <br>"
+"  $F9     - ROT Value  <br>"
+"  $FA-$FE - Free Space  <br>"
+"  $FF     - Used by Applesoft's STR$ Function  </p>"

_DOCS["6502"] = "<h2 id=\"6502-instructions\">6502 INSTRUCTIONS</h2><hr>"
+"<h3 id=\"table-of-instruction-codes\">Table of instruction codes</h3>"
+"<blockquote>"
+"  <table>"
+"  <thead>"
+"  <tr>"
+"  <th id=\"\" style=\"text-align:center;\"></th>"
+"  <th id=\"00\" style=\"text-align:center;\">00</th>"
+"  <th id=\"01\" style=\"text-align:center;\">01</th>"
+"  <th id=\"02\" style=\"text-align:center;\">02</th>"
+"  <th id=\"03\" style=\"text-align:center;\">03</th>"
+"  <th id=\"04\" style=\"text-align:center;\">04</th>"
+"  <th id=\"05\" style=\"text-align:center;\">05</th>"
+"  <th id=\"06\" style=\"text-align:center;\">06</th>"
+"  <th id=\"07\" style=\"text-align:center;\">07</th>"
+"  <th id=\"08\" style=\"text-align:center;\">08</th>"
+"  <th id=\"09\" style=\"text-align:center;\">09</th>"
+"  <th id=\"0a\" style=\"text-align:center;\">0A</th>"
+"  <th id=\"0b\" style=\"text-align:center;\">0B</th>"
+"  <th id=\"0c\" style=\"text-align:center;\">0C</th>"
+"  <th id=\"0d\" style=\"text-align:center;\">0D</th>"
+"  <th id=\"0e\" style=\"text-align:center;\">0E</th>"
+"  <th id=\"0f\" style=\"text-align:center;\">0F</th>"
+"  </tr>"
+"  </thead>"
+"  <tbody>"
+"  <tr>"
+"  <td style=\"text-align:center;\">00</td>"
+"  <td style=\"text-align:center;\">BRK impl</td>"
+"  <td style=\"text-align:center;\">ORA X,ind</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">ORA zpg</td>"
+"  <td style=\"text-align:center;\">ASL zpg</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">PHP impl</td>"
+"  <td style=\"text-align:center;\">ORA #</td>"
+"  <td style=\"text-align:center;\">ASL A</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">ORA abs</td>"
+"  <td style=\"text-align:center;\">ASL abs</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  </tr>"
+"  <tr>"
+"  <td style=\"text-align:center;\">10</td>"
+"  <td style=\"text-align:center;\">BPL rel</td>"
+"  <td style=\"text-align:center;\">ORA ind,Y</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">ORA zpg,X</td>"
+"  <td style=\"text-align:center;\">ASL zpg,X</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">CLC impl</td>"
+"  <td style=\"text-align:center;\">ORA abs,Y</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">ORA abs,X</td>"
+"  <td style=\"text-align:center;\">ASL abs,X</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  </tr>"
+"  <tr>"
+"  <td style=\"text-align:center;\">20</td>"
+"  <td style=\"text-align:center;\">JSR abs</td>"
+"  <td style=\"text-align:center;\">AND X,ind</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">BIT zpg</td>"
+"  <td style=\"text-align:center;\">AND zpg</td>"
+"  <td style=\"text-align:center;\">ROL zpg</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">PLP impl</td>"
+"  <td style=\"text-align:center;\">AND #</td>"
+"  <td style=\"text-align:center;\">ROL A</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">BIT abs</td>"
+"  <td style=\"text-align:center;\">AND abs</td>"
+"  <td style=\"text-align:center;\">ROL abs</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  </tr>"
+"  <tr>"
+"  <td style=\"text-align:center;\">30</td>"
+"  <td style=\"text-align:center;\">BMI rel</td>"
+"  <td style=\"text-align:center;\">AND ind,Y</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">AND zpg,X</td>"
+"  <td style=\"text-align:center;\">ROL zpg,X</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">SEC impl</td>"
+"  <td style=\"text-align:center;\">AND abs,Y</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">AND abs,X</td>"
+"  <td style=\"text-align:center;\">ROL abs,X</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  </tr>"
+"  <tr>"
+"  <td style=\"text-align:center;\">40</td>"
+"  <td style=\"text-align:center;\">RTI impl</td>"
+"  <td style=\"text-align:center;\">EOR X,ind</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">EOR zpg</td>"
+"  <td style=\"text-align:center;\">LSR zpg</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">PHA impl</td>"
+"  <td style=\"text-align:center;\">EOR #</td>"
+"  <td style=\"text-align:center;\">LSR A</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">JMP abs</td>"
+"  <td style=\"text-align:center;\">EOR abs</td>"
+"  <td style=\"text-align:center;\">LSR abs</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  </tr>"
+"  <tr>"
+"  <td style=\"text-align:center;\">50</td>"
+"  <td style=\"text-align:center;\">BVC rel</td>"
+"  <td style=\"text-align:center;\">EOR ind,Y</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">EOR zpg,X</td>"
+"  <td style=\"text-align:center;\">LSR zpg,X</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">CLI impl</td>"
+"  <td style=\"text-align:center;\">EOR abs,Y</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">EOR abs,X</td>"
+"  <td style=\"text-align:center;\">LSR abs,X</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  </tr>"
+"  <tr>"
+"  <td style=\"text-align:center;\">60</td>"
+"  <td style=\"text-align:center;\">RTS impl</td>"
+"  <td style=\"text-align:center;\">ADC X,ind</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">ADC zpg</td>"
+"  <td style=\"text-align:center;\">ROR zpg</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">PLA impl</td>"
+"  <td style=\"text-align:center;\">ADC #</td>"
+"  <td style=\"text-align:center;\">ROR A</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">JMP ind</td>"
+"  <td style=\"text-align:center;\">ADC abs</td>"
+"  <td style=\"text-align:center;\">ROR abs</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  </tr>"
+"  <tr>"
+"  <td style=\"text-align:center;\">70</td>"
+"  <td style=\"text-align:center;\">BVS rel</td>"
+"  <td style=\"text-align:center;\">ADC ind,Y</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">ADC zpg,X</td>"
+"  <td style=\"text-align:center;\">ROR zpg,X</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">SEI impl</td>"
+"  <td style=\"text-align:center;\">ADC abs,Y</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">ADC abs,X</td>"
+"  <td style=\"text-align:center;\">ROR abs,X</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  </tr>"
+"  <tr>"
+"  <td style=\"text-align:center;\">80</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">STA X,ind</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">STY zpg</td>"
+"  <td style=\"text-align:center;\">STA zpg</td>"
+"  <td style=\"text-align:center;\">STX zpg</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">DEY impl</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">TXA impl</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">STY abs</td>"
+"  <td style=\"text-align:center;\">STA abs</td>"
+"  <td style=\"text-align:center;\">STX abs</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  </tr>"
+"  <tr>"
+"  <td style=\"text-align:center;\">90</td>"
+"  <td style=\"text-align:center;\">BCC rel</td>"
+"  <td style=\"text-align:center;\">STA ind,Y</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">STY zpg,X</td>"
+"  <td style=\"text-align:center;\">STA zpg,X</td>"
+"  <td style=\"text-align:center;\">STX zpg,Y</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">TYA impl</td>"
+"  <td style=\"text-align:center;\">STA abs,Y</td>"
+"  <td style=\"text-align:center;\">TXS impl</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">STA abs,X</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  </tr>"
+"  <tr>"
+"  <td style=\"text-align:center;\">A0</td>"
+"  <td style=\"text-align:center;\">LDY #</td>"
+"  <td style=\"text-align:center;\">LDA X,ind</td>"
+"  <td style=\"text-align:center;\">LDX #</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">LDY zpg</td>"
+"  <td style=\"text-align:center;\">LDA zpg</td>"
+"  <td style=\"text-align:center;\">LDX zpg</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">TAY impl</td>"
+"  <td style=\"text-align:center;\">LDA #</td>"
+"  <td style=\"text-align:center;\">TAX impl</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">LDY abs</td>"
+"  <td style=\"text-align:center;\">LDA abs</td>"
+"  <td style=\"text-align:center;\">LDX abs</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  </tr>"
+"  <tr>"
+"  <td style=\"text-align:center;\">B0</td>"
+"  <td style=\"text-align:center;\">BCS rel</td>"
+"  <td style=\"text-align:center;\">LDA ind,Y</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">LDY zpg,X</td>"
+"  <td style=\"text-align:center;\">LDA zpg,X</td>"
+"  <td style=\"text-align:center;\">LDX zpg,Y</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">CLV impl</td>"
+"  <td style=\"text-align:center;\">LDA abs,Y</td>"
+"  <td style=\"text-align:center;\">TSX impl</td>"
+"  <td style=\"text-align:center;\">-></td>"
+"  <td style=\"text-align:center;\">LDY abs,X</td>"
+"  <td style=\"text-align:center;\">LDA abs,X</td>"
+"  <td style=\"text-align:center;\">LDX abs,Y</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  </tr>"
+"  <tr>"
+"  <td style=\"text-align:center;\">C0</td>"
+"  <td style=\"text-align:center;\">CPY #</td>"
+"  <td style=\"text-align:center;\">CMP X,ind</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">CPY zpg</td>"
+"  <td style=\"text-align:center;\">CMP zpg</td>"
+"  <td style=\"text-align:center;\">DEC zpg</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">INY impl</td>"
+"  <td style=\"text-align:center;\">CMP #</td>"
+"  <td style=\"text-align:center;\">DEX impl</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">CPY abs</td>"
+"  <td style=\"text-align:center;\">CMP abs</td>"
+"  <td style=\"text-align:center;\">DEC abs</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  </tr>"
+"  <tr>"
+"  <td style=\"text-align:center;\">D0</td>"
+"  <td style=\"text-align:center;\">BNE rel</td>"
+"  <td style=\"text-align:center;\">CMP ind,Y</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">CMP zpg,X</td>"
+"  <td style=\"text-align:center;\">DEC zpg,X</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">CLD impl</td>"
+"  <td style=\"text-align:center;\">CMP abs,Y</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">CMP abs,X</td>"
+"  <td style=\"text-align:center;\">DEC abs,X</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  </tr>"
+"  <tr>"
+"  <td style=\"text-align:center;\">E0</td>"
+"  <td style=\"text-align:center;\">CPX #</td>"
+"  <td style=\"text-align:center;\">SBC X,ind</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">CPX zpg</td>"
+"  <td style=\"text-align:center;\">SBC zpg</td>"
+"  <td style=\"text-align:center;\">INC zpg</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">INX impl</td>"
+"  <td style=\"text-align:center;\">SBC #</td>"
+"  <td style=\"text-align:center;\">NOP impl</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">CPX abs</td>"
+"  <td style=\"text-align:center;\">SBC abs</td>"
+"  <td style=\"text-align:center;\">INC abs</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  </tr>"
+"  <tr>"
+"  <td style=\"text-align:center;\">F0</td>"
+"  <td style=\"text-align:center;\">BEQ rel</td>"
+"  <td style=\"text-align:center;\">SBC ind,Y</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">SBC zpg,X</td>"
+"  <td style=\"text-align:center;\">INC zpg,X</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">SED impl</td>"
+"  <td style=\"text-align:center;\">SBC abs,Y</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">-</td>"
+"  <td style=\"text-align:center;\">SBC abs,X</td>"
+"  <td style=\"text-align:center;\">INC abs,X</td>"
+"  <td style=\"text-align:center;\"></td>"
+"  </tr>"
+"  </tbody>"
+"  </table>"
+"</blockquote>"
+"<h3 id=\"address-modes\">Address Modes</h3>"
+"<pre><code>  A     ....  Accumulator             OPC A       operand is AC (implied single byte instruction)  <br>"
+"  abs   ....  absolute                OPC $LLHH   operand is address $HHLL *  <br>"
+"  abs,X ....  absolute, X-indexed     OPC $LLHH,X operand is address; effective address is address incremented by X with carry **  <br>"
+"  abs,Y ....  absolute, Y-indexed     OPC $LLHH,Y operand is address; effective address is address incremented by Y with carry **  <br>"
+"  #     ....  immediate               OPC #$BB    operand is byte BB  <br>"
+"  impl  ....  implied                 OPC         operand implied  <br>"
+"  ind   ....  indirect                OPC ($LLHH) operand is address; effective address is contents of word at address: C.w($HHLL)  <br>"
+"  X,ind ....  X-indexed, indirect     OPC ($LL,X) operand is zeropage address; effective address is word in (LL + X, LL + X + 1), inc. without carry: C.w($00LL + X)  <br>"
+"  ind,Y ....  indirect, Y-indexed     OPC ($LL),Y operand is zeropage address; effective address is word in (LL, LL + 1) incremented by Y with carry: C.w($00LL) + Y  <br>"
+"  rel   ....  relative                OPC $BB     branch target is PC + signed offset BB ***  <br>"
+"  zpg   ....  zeropage                OPC $LL     operand is zeropage address (hi-byte is zero, address = $00LL)  <br>"
+"  zpg,X ....  zeropage, X-indexed     OPC $LL,X   operand is zeropage address; effective address is address incremented by X without carry **  <br>"
+"  zpg,Y ....  zeropage, Y-indexed     OPC $LL,Y   operand is zeropage address; effective address is address incremented by Y without carry **  <br>"
+"<br>"
+"  *&nbsp;&nbsp; 16-bit address words are little-endian, lo(w)-byte first, followed by the hi(gh)-byte.  <br>"
+"  (An assembler will use a human readable, big-endian notation as in $HHLL.)  <br>"
+"<br>"
+"  **&nbsp; The available 16-bit address space is conceived as consisting of pages of 256 bytes each, with  <br>"
+"  address hi-bytes representing the page index. An increment with carry may affect the hi-byte  <br>"
+"  and may thus result in a crossing of page boundaries, adding an extra cycle to the execution.  <br>"
+"  Increments without carry do not affect the hi-byte of an address and no page transitions do occur.  <br>"
+"  Generally, increments of 16-bit addresses include a carry, increments of zeropage addresses don't.  <br>"
+"  Notably this is not related in any way to the state of the carry bit of the accumulator.  <br>"
+"<br>"
+"  *** Branch offsets are signed 8-bit values, -128 ... +127, negative offsets in two's complement.  <br>"
+"  Page transitions may occur and add an extra cycle to the execution.  </code></pre>"
+"<h3 id=\"a-nametab4_instr_by_nameainstructions-by-name\"><a name=\"tab4_INSTR_BY_NAME\"></a>Instructions by Name</h3>"
+"<p><b><div contentEditable=false></b>"
+"<a href=\"#tab4_ADC\" title=\"instruction details for ADC...\">ADC</a>    ….  add with carry  <br>"
+"<a href=\"#tab4_AND\" title=\"instruction details for AND...\">AND</a>    ….  and (with accumulator)  <br>"
+"<a href=\"#tab4_ASL\" title=\"instruction details for ASL...\">ASL</a>    ….  arithmetic shift left  <br>"
+"<a href=\"#tab4_BCC\" title=\"instruction details for BCC...\">BCC</a>    ….  branch on carry clear  <br>"
+"<a href=\"#tab4_BCS\" title=\"instruction details for BCS...\">BCS</a>    ….  branch on carry set  <br>"
+"<a href=\"#tab4_BEQ\" title=\"instruction details for BEQ...\">BEQ</a>    ….  branch on equal (zero set)  <br>"
+"<a href=\"#tab4_BIT\" title=\"instruction details for BIT...\">BIT</a>    ….  bit test  <br>"
+"<a href=\"#tab4_BMI\" title=\"instruction details for BMI...\">BMI</a>    ….    branch on minus (negative set)  <br>"
+"<a href=\"#tab4_BNE\" title=\"instruction details for BNE...\">BNE</a>    ….    branch on not equal (zero clear)  <br>"
+"<a href=\"#tab4_BPL\" title=\"instruction details for BPL...\">BPL</a>    ….    branch on plus (negative clear)  <br>"
+"<a href=\"#tab4_BRK\" title=\"instruction details for BRK...\">BRK</a>    ….    break interrupt  <br>"
+"<a href=\"#tab4_BVC\" title=\"instruction details for BVC...\">BVC</a>    ….    branch on overflow clear  <br>"
+"<a href=\"#tab4_BVS\" title=\"instruction details for BVS...\">BVS</a>    ….    branch on overflow set  <br>"
+"<a href=\"#tab4_CLC\" title=\"instruction details for CLC...\">CLC</a>    ….    clear carry  <br>"
+"<a href=\"#tab4_CLD\" title=\"instruction details for CLD...\">CLD</a>    ….    clear decimal  <br>"
+"<a href=\"#tab4_CLI\" title=\"instruction details for CLI...\">CLI</a>    ….    clear interrupt disable  <br>"
+"<a href=\"#tab4_CLV\" title=\"instruction details for CLV...\">CLV</a>    ….    clear overflow  <br>"
+"<a href=\"#tab4_CMP\" title=\"instruction details for CMP...\">CMP</a>    ….    compare (with accumulator)  <br>"
+"<a href=\"#tab4_CPX\" title=\"instruction details for CPX...\">CPX</a>    ….    compare with X  <br>"
+"<a href=\"#tab4_CPY\" title=\"instruction details for CPY...\">CPY</a>    ….    compare with Y  <br>"
+"<a href=\"#tab4_DEC\" title=\"instruction details for DEC...\">DEC</a>    ….    decrement  <br>"
+"<a href=\"#tab4_DEX\" title=\"instruction details for DEX...\">DEX</a>    ….    decrement X  <br>"
+"<a href=\"#tab4_DEY\" title=\"instruction details for DEY...\">DEY</a>    ….    decrement Y  <br>"
+"<a href=\"#tab4_EOR\" title=\"instruction details for EOR...\">EOR</a>    ….    exclusive or (with accumulator)  <br>"
+"<a href=\"#tab4_INC\" title=\"instruction details for INC...\">INC</a>    ….    increment  <br>"
+"<a href=\"#tab4_INX\" title=\"instruction details for INX...\">INX</a>    ….    increment X  <br>"
+"<a href=\"#tab4_INY\" title=\"instruction details for INY...\">INY</a>    ….    increment Y  <br>"
+"<a href=\"#tab4_JMP\" title=\"instruction details for JMP...\">JMP</a>    ….    jump  <br>"
+"<a href=\"#tab4_JSR\" title=\"instruction details for JSR...\">JSR</a>    ….    jump subroutine  <br>"
+"<a href=\"#tab4_LDA\" title=\"instruction details for LDA...\">LDA</a>    ….    load accumulator  <br>"
+"<a href=\"#tab4_LDX\" title=\"instruction details for LDX...\">LDX</a>    ….    load X  <br>"
+"<a href=\"#tab4_LDY\" title=\"instruction details for LDY...\">LDY</a>    ….    load Y  <br>"
+"<a href=\"#tab4_LSR\" title=\"instruction details for LSR...\">LSR</a>    ….    logical shift right  <br>"
+"<a href=\"#tab4_NOP\" title=\"instruction details for NOP...\">NOP</a>    ….    no operation  <br>"
+"<a href=\"#tab4_ORA\" title=\"instruction details for ORA...\">ORA</a>    ….    or with accumulator  <br>"
+"<a href=\"#tab4_PHA\" title=\"instruction details for PHA...\">PHA</a>    ….    push accumulator  <br>"
+"<a href=\"#tab4_PHP\" title=\"instruction details for PHP...\">PHP</a>    ….    push processor status (SR)  <br>"
+"<a href=\"#tab4_PLA\" title=\"instruction details for PLA...\">PLA</a>    ….    pull accumulator  <br>"
+"<a href=\"#tab4_PLP\" title=\"instruction details for PLP...\">PLP</a>    ….    pull processor status (SR)  <br>"
+"<a href=\"#tab4_ROL\" title=\"instruction details for ROL...\">ROL</a>    ….    rotate left  <br>"
+"<a href=\"#tab4_ROR\" title=\"instruction details for ROR...\">ROR</a>    ….    rotate right  <br>"
+"<a href=\"#tab4_RTI\" title=\"instruction details for RTI...\">RTI</a>    ….    return from interrupt  <br>"
+"<a href=\"#tab4_RTS\" title=\"instruction details for RTS...\">RTS</a>    ….    return from subroutine  <br>"
+"<a href=\"#tab4_SBC\" title=\"instruction details for SBC...\">SBC</a>    ….    subtract with carry  <br>"
+"<a href=\"#tab4_SEC\" title=\"instruction details for SEC...\">SEC</a>    ….    set carry  <br>"
+"<a href=\"#tab4_SED\" title=\"instruction details for SED...\">SED</a>    ….    set decimal  <br>"
+"<a href=\"#tab4_SEI\" title=\"instruction details for SEI...\">SEI</a>    ….    set interrupt disable  <br>"
+"<a href=\"#tab4_STA\" title=\"instruction details for STA...\">STA</a>    ….    store accumulator  <br>"
+"<a href=\"#tab4_STX\" title=\"instruction details for STX...\">STX</a>    ….    store X  <br>"
+"<a href=\"#tab4_STY\" title=\"instruction details for STY...\">STY</a>    ….    store Y  <br>"
+"<a href=\"#tab4_TAX\" title=\"instruction details for TAX...\">TAX</a>    ….    transfer accumulator to X  <br>"
+"<a href=\"#tab4_TAY\" title=\"instruction details for TAY...\">TAY</a>    ….    transfer accumulator to Y  <br>"
+"<a href=\"#tab4_TSX\" title=\"instruction details for TSX...\">TSX</a>    ….    transfer stack pointer to X  <br>"
+"<a href=\"#tab4_TXA\" title=\"instruction details for TXA...\">TXA</a>    ….    transfer X to accumulator  <br>"
+"<a href=\"#tab4_TXS\" title=\"instruction details for TXS...\">TXS</a>    ….    transfer X to stack pointer  <br>"
+"<a href=\"#tab4_TYA\" title=\"instruction details for TYA...\">TYA</a>    ….    transfer Y to accumulator  <br>"
+"</div></p>"
+"<h3 id=\"registers\">Registers</h3>"
+"<pre><code>  PC    ....  program counter (16 bit)<br>"
+"  AC    ....  accumulator (8 bit)<br>"
+"  X     ....  X register (8 bit)<br>"
+"  Y     ....  Y register (8 bit)<br>"
+"  SR    ....  status register [NV-BDIZC] (8 bit)<br>"
+"  SP    ....  stack pointer (8 bit)</code></pre>"
+"<h3 id=\"status-register-flags-bit-7-to-bit-0\">Status Register Flags (bit 7 to bit 0)</h3>"
+"<pre><code>  N    ....    Negative<br>"
+"  V    ....    Overflow<br>"
+"  -    ....    ignored<br>"
+"  B    ....    Break<br>"
+"  D    ....    Decimal (use BCD for arithmetics)<br>"
+"  I    ....    Interrupt (IRQ disable)<br>"
+"  Z    ....    Zero<br>"
+"  C    ....    Carry</code></pre>"
+"<h3 id=\"processor-stack\">Processor Stack</h3>"
+"<p>LIFO, top down, 8 bit range, 0x0100 - 0x01FF  </p>"
+"<h3 id=\"bytes-words-addressing\">Bytes, Words, Addressing</h3>"
+"<ul>"
+"<li>8 bit bytes, 16 bit words in lobyte-hibyte representation (Little-Endian).  </li>"
+"<li>16 bit address range, operands follow instruction codes.</li>"
+"<li>Signed values are two's complement, sign in bit 7 (most significant bit).  <br>"
+"(%11111111 = $FF = -1, %10000000 = $80 = -128, %01111111 = $7F = +127)  </li>"
+"</ul>"
+"<h3 id=\"vendor\">Vendor</h3>"
+"<p>MOS Technology, 1975  <br>"
+"<img src=\"https://github.com/RetroAppleJS/RetroAppleJS.github.io/raw/main/res/MOS_6502AD_300.png\" alt=\"MOS Techology 6502 MPU\" title=\"MOS Techology 6502 MPU\" /></p>"
+"<h2 id=\"appendix-a-6502-instructions-in-detail\">APPENDIX A: 6502 Instructions in Detail</h2><hr>"
+"<p><b><div contentEditable=false></b></p>"
+"<h3 id=\"a-nametab4_adcaadc---add-memory-to-accumulator-with-carry---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_ADC\"></a>ADC - Add Memory to Accumulator with Carry - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code>  A + M + C -> A, C                N Z C I D V<br>"
+"                                  + + + - - +<br>"
+"<br>"
+"  addressing    assembler    opc  bytes  cyles<br>"
+"  --------------------------------------------<br>"
+"  immidiate     ADC #oper     69    2     2<br>"
+"  zeropage      ADC oper      65    2     3<br>"
+"  zeropage,X    ADC oper,X    75    2     4<br>"
+"  absolute      ADC oper      6D    3     4<br>"
+"  absolute,X    ADC oper,X    7D    3     4\*<br>"
+"  absolute,Y    ADC oper,Y    79    3     4\*<br>"
+"  (indirect,X)  ADC (oper,X)  61    2     6<br>"
+"  (indirect),Y  ADC (oper),Y  71    2     5\*</code></pre>"
+"<h3 id=\"a-nametab4_andaand---and-memory-with-accumulator---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_AND\"></a>AND - AND Memory with Accumulator - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> A AND M -> A                     N Z C I D V<br>"
+"                                  + + - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" immidiate     AND #oper     29    2     2<br>"
+" zeropage      AND oper      25    2     3<br>"
+" zeropage,X    AND oper,X    35    2     4<br>"
+" absolute      AND oper      2D    3     4<br>"
+" absolute,X    AND oper,X    3D    3     4\*<br>"
+" absolute,Y    AND oper,Y    39    3     4\*<br>"
+" (indirect,X)  AND (oper,X)  21    2     6<br>"
+" (indirect),Y  AND (oper),Y  31    2     5\*</code></pre>"
+"<h3 id=\"a-nametab4_aslaasl---shift-left-one-bit-memory-or-accumulator---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_ASL\"></a>ASL - Shift Left One Bit (Memory or Accumulator) - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> C <- \[76543210\] <- 0             N Z C I D V<br>"
+"                                  + + + - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" accumulator   ASL A         0A    1     2<br>"
+" zeropage      ASL oper      06    2     5<br>"
+" zeropage,X    ASL oper,X    16    2     6<br>"
+" absolute      ASL oper      0E    3     6<br>"
+" absolute,X    ASL oper,X    1E    3     7</code></pre>"
+"<h3 id=\"a-nametab4_bccabcc---branch-on-carry-clear---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_BCC\"></a>BCC - Branch on Carry Clear - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> branch on C = 0                  N Z C I D V<br>"
+"                                  - - - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" relative      BCC oper      90    2     2\*\*</code></pre>"
+"<h3 id=\"a-nametab4_bcsabcs---branch-on-carry-set---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_BCS\"></a>BCS - Branch on Carry Set - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> branch on C = 1                  N Z C I D V<br>"
+"                                  - - - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" relative      BCS oper      B0    2     2\*\*</code></pre>"
+"<h3 id=\"a-nametab4_beqabeq---branch-on-result-zero---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_BEQ\"></a>BEQ - Branch on Result Zero - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> branch on Z = 1                  N Z C I D V<br>"
+"                                  - - - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" relative      BEQ oper      F0    2     2\*\*</code></pre>"
+"<h3 id=\"a-nametab4_bitabit---test-bits-in-memory-with-accumulator---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_BIT\"></a>BIT - Test Bits in Memory with Accumulator - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> bits 7 and 6 of operand are transfered to bit 7 and 6 of SR (N,V);<br>"
+" the zeroflag is set to the result of operand AND accumulator.<br>"
+"<br>"
+" A AND M, M7 -> N, M6 -> V        N Z C I D V<br>"
+"                                 M7 + - - - M6<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" zeropage      BIT oper      24    2     3<br>"
+" absolute      BIT oper      2C    3     4</code></pre>"
+"<h3 id=\"a-nametab4_bmiabmi---branch-on-result-minus---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_BMI\"></a>BMI - Branch on Result Minus - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> branch on N = 1                  N Z C I D V<br>"
+"                                  - - - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" relative      BMI oper      30    2     2\*\*</code></pre>"
+"<h3 id=\"a-nametab4_bneabne---branch-on-result-not-zero---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_BNE\"></a>BNE - Branch on Result not Zero - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> branch on Z = 0                  N Z C I D V<br>"
+"                                  - - - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" relative      BNE oper      D0    2     2\*\*</code></pre>"
+"<h3 id=\"a-nametab4_bplabpl---branch-on-result-plus---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_BPL\"></a>BPL - Branch on Result Plus - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> branch on N = 0                  N Z C I D V<br>"
+"                                  - - - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" relative      BPL oper      10    2     2\*\*</code></pre>"
+"<h3 id=\"a-nametab4_brkabrk---force-break---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_BRK\"></a>BRK - Force Break - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> interrupt,                       N Z C I D V<br>"
+" push PC+2, push SR               - - - 1 - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" implied       BRK           00    1     7</code></pre>"
+"<h3 id=\"a-nametab4_bvcabvc---branch-on-overflow-clear---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_BVC\"></a>BVC - Branch on Overflow Clear - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> branch on V = 0                  N Z C I D V<br>"
+"                                  - - - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" relative      BVC oper      50    2     2\*\*</code></pre>"
+"<h3 id=\"a-nametab4_bvsabvs---branch-on-overflow-set---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_BVS\"></a>BVS - Branch on Overflow Set - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> branch on V = 1                  N Z C I D V<br>"
+"                                  - - - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" relative      BVC oper      70    2     2\*\*</code></pre>"
+"<h3 id=\"a-nametab4_clcaclc---clear-carry-flag---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_CLC\"></a>CLC - Clear Carry Flag - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> 0 -> C                           N Z C I D V<br>"
+"                                  - - 0 - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" implied       CLC           18    1     2</code></pre>"
+"<h3 id=\"a-nametab4_cldacld---clear-decimal-mode---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_CLD\"></a>CLD - Clear Decimal Mode - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> 0 -> D                           N Z C I D V<br>"
+"                                  - - - - 0 -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" implied       CLD           D8    1     2</code></pre>"
+"<h3 id=\"a-nametab4_cliacli---clear-interrupt-disable-bit---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_CLI\"></a>CLI - Clear Interrupt Disable Bit - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> 0 -> I                           N Z C I D V<br>"
+"                                  - - - 0 - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" implied       CLI           58    1     2</code></pre>"
+"<h3 id=\"a-nametab4_clvaclv---clear-overflow-flag---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_CLV\"></a>CLV - Clear Overflow Flag - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> 0 -> V                           N Z C I D V<br>"
+"                                  - - - - - 0<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" implied       CLV           B8    1     2</code></pre>"
+"<h3 id=\"a-nametab4_cmpacmp---compare-memory-with-accumulator---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_CMP\"></a>CMP - Compare Memory with Accumulator - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> A - M                            N Z C I D V<br>"
+"                                  + + + - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" immidiate     CMP #oper     C9    2     2<br>"
+" zeropage      CMP oper      C5    2     3<br>"
+" zeropage,X    CMP oper,X    D5    2     4<br>"
+" absolute      CMP oper      CD    3     4<br>"
+" absolute,X    CMP oper,X    DD    3     4\*<br>"
+" absolute,Y    CMP oper,Y    D9    3     4\*<br>"
+" (indirect,X)  CMP (oper,X)  C1    2     6<br>"
+" (indirect),Y  CMP (oper),Y  D1    2     5\*</code></pre>"
+"<h3 id=\"a-nametab4_cpxacpx---compare-memory-and-index-x---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_CPX\"></a>CPX - Compare Memory and Index X - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> X - M                            N Z C I D V<br>"
+"                                  + + + - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" immidiate     CPX #oper     E0    2     2<br>"
+" zeropage      CPX oper      E4    2     3<br>"
+" absolute      CPX oper      EC    3     4</code></pre>"
+"<h3 id=\"a-nametab4_cpyacpy---compare-memory-and-index-y---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_CPY\"></a>CPY - Compare Memory and Index Y - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> Y - M                            N Z C I D V<br>"
+"                                  + + + - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" immidiate     CPY #oper     C0    2     2<br>"
+" zeropage      CPY oper      C4    2     3<br>"
+" absolute      CPY oper      CC    3     4</code></pre>"
+"<h3 id=\"a-nametab4_decadec---decrement-memory-by-one---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_DEC\"></a>DEC - Decrement Memory by One - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> M - 1 -> M                       N Z C I D V<br>"
+"                                  + + - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" zeropage      DEC oper      C6    2     5<br>"
+" zeropage,X    DEC oper,X    D6    2     6<br>"
+" absolute      DEC oper      CE    3     6<br>"
+" absolute,X    DEC oper,X    DE    3     7</code></pre>"
+"<h3 id=\"a-nametab4_dexadex---decrement-index-x-by-one---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_DEX\"></a>DEX - Decrement Index X by One - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> X - 1 -> X                       N Z C I D V<br>"
+"                                  + + - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" implied       DEC           CA    1     2</code></pre>"
+"<h3 id=\"a-nametab4_deyadey---decrement-index-y-by-one---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_DEY\"></a>DEY - Decrement Index Y by One - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> Y - 1 -> Y                       N Z C I D V<br>"
+"                                  + + - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" implied       DEC           88    1     2</code></pre>"
+"<h3 id=\"a-nametab4_eoraeor---exclusive-or-memory-with-accumulator---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_EOR\"></a>EOR - Exclusive-OR Memory with Accumulator - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> A EOR M -> A                     N Z C I D V<br>"
+"                                  + + - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" immidiate     EOR #oper     49    2     2<br>"
+" zeropage      EOR oper      45    2     3<br>"
+" zeropage,X    EOR oper,X    55    2     4<br>"
+" absolute      EOR oper      4D    3     4<br>"
+" absolute,X    EOR oper,X    5D    3     4\*<br>"
+" absolute,Y    EOR oper,Y    59    3     4\*<br>"
+" (indirect,X)  EOR (oper,X)  41    2     6<br>"
+" (indirect),Y  EOR (oper),Y  51    2     5\*</code></pre>"
+"<h3 id=\"a-nametab4_incainc---increment-memory-by-one---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_INC\"></a>INC - Increment Memory by One - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> M + 1 -> M                       N Z C I D V<br>"
+"                                  + + - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" zeropage      INC oper      E6    2     5<br>"
+" zeropage,X    INC oper,X    F6    2     6<br>"
+" absolute      INC oper      EE    3     6<br>"
+" absolute,X    INC oper,X    FE    3     7</code></pre>"
+"<h3 id=\"a-nametab4_inxainx---increment-index-x-by-one---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_INX\"></a>INX - Increment Index X by One - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> X + 1 -> X                       N Z C I D V<br>"
+"                                  + + - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" implied       INX           E8    1     2</code></pre>"
+"<h3 id=\"a-nametab4_inyainy---increment-index-y-by-one---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_INY\"></a>INY - Increment Index Y by One - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> Y + 1 -> Y                       N Z C I D V<br>"
+"                                  + + - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" implied       INY           C8    1     2</code></pre>"
+"<h3 id=\"a-nametab4_jmpajmp---jump-to-new-location---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_JMP\"></a>JMP - Jump to New Location - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> (PC+1) -> PCL                    N Z C I D V<br>"
+" (PC+2) -> PCH                    - - - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" absolute      JMP oper      4C    3     3<br>"
+" indirect      JMP (oper)    6C    3     5</code></pre>"
+"<h3 id=\"a-nametab4_jsrajsr---jump-to-new-location-saving-return-address---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_JSR\"></a>JSR - Jump to New Location Saving Return Address - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> push (PC+2),                     N Z C I D V<br>"
+" (PC+1) -> PCL                    - - - - - -<br>"
+" (PC+2) -> PCH<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" absolute      JSR oper      20    3     6</code></pre>"
+"<h3 id=\"a-nametab4_ldaalda---load-accumulator-with-memory---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_LDA\"></a>LDA - Load Accumulator with Memory - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> M -> A                           N Z C I D V<br>"
+"                                  + + - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" immidiate     LDA #oper     A9    2     2<br>"
+" zeropage      LDA oper      A5    2     3<br>"
+" zeropage,X    LDA oper,X    B5    2     4<br>"
+" absolute      LDA oper      AD    3     4<br>"
+" absolute,X    LDA oper,X    BD    3     4\*<br>"
+" absolute,Y    LDA oper,Y    B9    3     4\*<br>"
+" (indirect,X)  LDA (oper,X)  A1    2     6<br>"
+" (indirect),Y  LDA (oper),Y  B1    2     5\*</code></pre>"
+"<h3 id=\"a-nametab4_ldxaldx---load-index-x-with-memory---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_LDX\"></a>LDX - Load Index X with Memory - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> M -> X                           N Z C I D V<br>"
+"                                  + + - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" immidiate     LDX #oper     A2    2     2<br>"
+" zeropage      LDX oper      A6    2     3<br>"
+" zeropage,Y    LDX oper,Y    B6    2     4<br>"
+" absolute      LDX oper      AE    3     4<br>"
+" absolute,Y    LDX oper,Y    BE    3     4\*</code></pre>"
+"<h3 id=\"a-nametab4_ldyaldy---load-index-y-with-memory---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_LDY\"></a>LDY - Load Index Y with Memory - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> M -> Y                           N Z C I D V<br>"
+"                                  + + - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" immidiate     LDY #oper     A0    2     2<br>"
+" zeropage      LDY oper      A4    2     3<br>"
+" zeropage,X    LDY oper,X    B4    2     4<br>"
+" absolute      LDY oper      AC    3     4<br>"
+" absolute,X    LDY oper,X    BC    3     4\*</code></pre>"
+"<h3 id=\"a-nametab4_lsralsr---shift-one-bit-right-memory-or-accumulator---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_LSR\"></a>LSR - Shift One Bit Right (Memory or Accumulator) - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> 0 -> \[76543210\] -> C             N Z C I D V<br>"
+"                                  0 + + - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" accumulator   LSR A         4A    1     2<br>"
+" zeropage      LSR oper      46    2     5<br>"
+" zeropage,X    LSR oper,X    56    2     6<br>"
+" absolute      LSR oper      4E    3     6<br>"
+" absolute,X    LSR oper,X    5E    3     7</code></pre>"
+"<h3 id=\"a-nametab4_nopanop---no-operation---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_NOP\"></a>NOP - No Operation - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> ---                              N Z C I D V<br>"
+"                                  - - - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" implied       NOP           EA    1     2</code></pre>"
+"<h3 id=\"a-nametab4_oraaora---or-memory-with-accumulator---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_ORA\"></a>ORA - OR Memory with Accumulator - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> A OR M -> A                      N Z C I D V<br>"
+"                                  + + - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" immidiate     ORA #oper     09    2     2<br>"
+" zeropage      ORA oper      05    2     3<br>"
+" zeropage,X    ORA oper,X    15    2     4<br>"
+" absolute      ORA oper      0D    3     4<br>"
+" absolute,X    ORA oper,X    1D    3     4\*<br>"
+" absolute,Y    ORA oper,Y    19    3     4\*<br>"
+" (indirect,X)  ORA (oper,X)  01    2     6<br>"
+" (indirect),Y  ORA (oper),Y  11    2     5\*</code></pre>"
+"<h3 id=\"a-nametab4_phaapha---push-accumulator-on-stack---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_PHA\"></a>PHA - Push Accumulator on Stack - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> push A                           N Z C I D V<br>"
+"                                  - - - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" implied       PHA           48    1     3</code></pre>"
+"<h3 id=\"a-nametab4_phpaphp---push-processor-status-on-stack---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_PHP\"></a>PHP - Push Processor Status on Stack - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> push SR                          N Z C I D V<br>"
+"                                  - - - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" implied       PHP           08    1     3</code></pre>"
+"<h3 id=\"a-nametab4_plaapla---pull-accumulator-from-stack---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_PLA\"></a>PLA - Pull Accumulator from Stack - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> pull A                           N Z C I D V<br>"
+"                                  + + - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" implied       PLA           68    1     4</code></pre>"
+"<h3 id=\"a-nametab4_plpaplp---pull-processor-status-from-stack---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_PLP\"></a>PLP - Pull Processor Status from Stack - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> pull SR                          N Z C I D V<br>"
+"                                  from stack<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" implied       PLP           28    1     4</code></pre>"
+"<h3 id=\"a-nametab4_rolarol---rotate-one-bit-left-memory-or-accumulator---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_ROL\"></a>ROL - Rotate One Bit Left (Memory or Accumulator) - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> C <- \[76543210\] <- C             N Z C I D V<br>"
+"                                  + + + - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" accumulator   ROL A         2A    1     2<br>"
+" zeropage      ROL oper      26    2     5<br>"
+" zeropage,X    ROL oper,X    36    2     6<br>"
+" absolute      ROL oper      2E    3     6<br>"
+" absolute,X    ROL oper,X    3E    3     7</code></pre>"
+"<h3 id=\"a-nametab4_roraror---rotate-one-bit-right-memory-or-accumulator---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_ROR\"></a>ROR - Rotate One Bit Right (Memory or Accumulator) - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> C -> \[76543210\] -> C             N Z C I D V<br>"
+"                                  + + + - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" accumulator   ROR A         6A    1     2<br>"
+" zeropage      ROR oper      66    2     5<br>"
+" zeropage,X    ROR oper,X    76    2     6<br>"
+" absolute      ROR oper      6E    3     6<br>"
+" absolute,X    ROR oper,X    7E    3     7</code></pre>"
+"<h3 id=\"a-nametab4_rtiarti---return-from-interrupt---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_RTI\"></a>RTI - Return from Interrupt - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> pull SR, pull PC                 N Z C I D V<br>"
+"                                  from stack<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" implied       RTI           40    1     6</code></pre>"
+"<h3 id=\"a-nametab4_rtsarts---return-from-subroutine---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_RTS\"></a>RTS - Return from Subroutine - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> pull PC, PC+1 -> PC              N Z C I D V<br>"
+"                                  - - - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" implied       RTS           60    1     6</code></pre>"
+"<h3 id=\"a-nametab4_sbcasbc---subtract-memory-from-accumulator-with-borrow---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_SBC\"></a>SBC - Subtract Memory from Accumulator with Borrow - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> A - M - C -> A                   N Z C I D V<br>"
+"                                  + + + - - +<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" immidiate     SBC #oper     E9    2     2<br>"
+" zeropage      SBC oper      E5    2     3<br>"
+" zeropage,X    SBC oper,X    F5    2     4<br>"
+" absolute      SBC oper      ED    3     4<br>"
+" absolute,X    SBC oper,X    FD    3     4\*<br>"
+" absolute,Y    SBC oper,Y    F9    3     4\*<br>"
+" (indirect,X)  SBC (oper,X)  E1    2     6<br>"
+" (indirect),Y  SBC (oper),Y  F1    2     5\*</code></pre>"
+"<h3 id=\"a-nametab4_secasec---set-carry-flag---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_SEC\"></a>SEC - Set Carry Flag - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> 1 -> C                           N Z C I D V<br>"
+"                                  - - 1 - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" implied       SEC           38    1     2</code></pre>"
+"<h3 id=\"a-nametab4_sedased---set-decimal-flag---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_SED\"></a>SED - Set Decimal Flag - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> 1 -> D                           N Z C I D V<br>"
+"                                  - - - - 1 -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" implied       SED           F8    1     2</code></pre>"
+"<h3 id=\"a-nametab4_seiasei---set-interrupt-disable-status---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_SEI\"></a>SEI - Set Interrupt Disable Status - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> 1 -> I                           N Z C I D V<br>"
+"                                  - - - 1 - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" implied       SEI           78    1     2</code></pre>"
+"<h3 id=\"a-nametab4_staasta---store-accumulator-in-memory---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_STA\"></a>STA - Store Accumulator in Memory - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> A -> M                           N Z C I D V<br>"
+"                                  - - - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" zeropage      STA oper      85    2     3<br>"
+" zeropage,X    STA oper,X    95    2     4<br>"
+" absolute      STA oper      8D    3     4<br>"
+" absolute,X    STA oper,X    9D    3     5<br>"
+" absolute,Y    STA oper,Y    99    3     5<br>"
+" (indirect,X)  STA (oper,X)  81    2     6<br>"
+" (indirect),Y  STA (oper),Y  91    2     6</code></pre>"
+"<h3 id=\"a-nametab4_stxastx---store-index-x-in-memory---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_STX\"></a>STX - Store Index X in Memory - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> X -> M                           N Z C I D V<br>"
+"                                  - - - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" zeropage      STX oper      86    2     3<br>"
+" zeropage,Y    STX oper,Y    96    2     4<br>"
+" absolute      STX oper      8E    3     4</code></pre>"
+"<h3 id=\"a-nametab4_styasty---sore-index-y-in-memory---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_STY\"></a>STY - Sore Index Y in Memory - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> Y -> M                           N Z C I D V<br>"
+"                                  - - - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" zeropage      STY oper      84    2     3<br>"
+" zeropage,X    STY oper,X    94    2     4<br>"
+" absolute      STY oper      8C    3     4</code></pre>"
+"<h3 id=\"a-nametab4_taxatax---transfer-accumulator-to-index-x---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_TAX\"></a>TAX - Transfer Accumulator to Index X - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> A -> X                           N Z C I D V<br>"
+"                                  + + - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" implied       TAX           AA    1     2</code></pre>"
+"<h3 id=\"a-nametab4_tayatay---transfer-accumulator-to-index-y---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_TAY\"></a>TAY - Transfer Accumulator to Index Y - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> A -> Y                           N Z C I D V<br>"
+"                                  + + - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" implied       TAY           A8    1     2</code></pre>"
+"<h3 id=\"a-nametab4_tsxatsx---transfer-stack-pointer-to-index-x---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_TSX\"></a>TSX - Transfer Stack Pointer to Index X - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> SP -> X                          N Z C I D V<br>"
+"                                  + + - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" implied       TSX           BA    1     2</code></pre>"
+"<h3 id=\"a-nametab4_txaatxa---transfer-index-x-to-accumulator---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_TXA\"></a>TXA - Transfer Index X to Accumulator - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> X -> A                           N Z C I D V<br>"
+"                                  + + - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" implied       TXA           8A    1     2</code></pre>"
+"<h3 id=\"a-nametab4_txsatxs---transfer-index-x-to-stack-register---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_TXS\"></a>TXS - Transfer Index X to Stack Register - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> X -> SP                          N Z C I D V<br>"
+"                                  - - - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" implied       TXS           9A    1     2</code></pre>"
+"<h3 id=\"a-nametab4_tyaatya---transfer-index-y-to-accumulator---toptab4_instr_by_name-instructions-by-name\"><a name=\"tab4_TYA\"></a>TYA - Transfer Index Y to Accumulator - <a href=\"#tab4_INSTR_BY_NAME\" title=\"instructions by name\">top</a></h3>"
+"<pre><code> Y -> A                           N Z C I D V<br>"
+"                                  + + - - - -<br>"
+"<br>"
+" addressing    assembler    opc  bytes  cyles<br>"
+" --------------------------------------------<br>"
+" implied       TYA           98    1     2</code></pre>"
+"<p></div></p>"
+"<p><em>*  add 1 to cycles if page boundery is crossed</em></p>"
+"<p><em>** add 1 to cycles if branch occurs on same page, add 2 to cycles if branch occurs to different page</em></p>"
+"<h4 id=\"legend-to-flags\">Legend to Flags</h4>"
+"<pre><code>  + ....      modified<br>"
+"  - ....      not modified<br>"
+"  1 ....      set<br>"
+"  0 ....      cleared<br>"
+"  M6 ....     memory bit 6<br>"
+"  M7 ....     memory bit 7</code></pre>"
+"<p>Note on assembler syntax:<br>"
+"Most assemblers employ \"OPC *oper\" for forced zeropage addressing.</p>"
+"<h2 id=\"appendix-b-6502-jump-vectors-and-stack-operations\">Appendix B: 6502 Jump Vectors and Stack Operations</h2><hr>"
+"<p>The 256 bytes processor stack of the 6502 is located at $0100 … $01FF in  <br>"
+"memory, growing down from top to bottom.  <br>"
+"There are three 2-byte address locations at the very top end of the 64K address  <br>"
+"space serving as jump vectors for reset/startup and interrupt operations:</p>"
+"<pre><code>  $FFFA, $FFFB ...  NMI (Non-Maskable Interrupt) vector  <br>"
+"  $FFFC, $FFFD ...  RES (Reset) vector  <br>"
+"  $FFFE, $FFFF ...  IRQ (Interrupt Request) vector</code></pre>"
+"<p>At the occurrence of an interrupt, the value of the program counter (PC) is put in  <br>"
+"high-low order onto the stack, followed by the value currently in the status  <br>"
+"register and control will be transferred to the address location found in the  <br>"
+"respective interrupt vector. These are recovered from the stack at the end of  <br>"
+"an interrupt routine by the RTI instruction.</p>"
+"<p><img src=\"https://github.com/RetroAppleJS/RetroAppleJS.github.io/raw/main/res/mcs6502-interrupt-ops_340.png\" alt=\"6502 Interrupt Operations\" />  </p>"
+"<p>(Image: MCS6502 Instruction Set Summary, MOS Technology, Inc.)</p>"
+"<p>Similarly, as a JSR instruction is encountered, PC is dumped onto the stack  <br>"
+"and recovered by the JSR instruction:</p>"
+"<p><img src=\"https://github.com/RetroAppleJS/RetroAppleJS.github.io/raw/main/res/mcs6502-jsr-rts-ops_340.png\" alt=\"6502 Subroutine Operations\" /></p>"
+"<p>(Image: MCS6502 Instruction Set Summary, MOS Technology, Inc.)</p>"

_DOCS["DEBUGGER"] = "<h2 id=\"debugger-instructions\">DEBUGGER Instructions</h2><hr>"
+"<h3 id=\"the-display\">The Display</h3>"
+"<p>The display shows all registers of a 6502/6510 CPU:</p>"
+"<pre><code>  PC  ....    Program Counter<br>"
+"  A   ....    Accumulator<br>"
+"  X   ....    X Register<br>"
+"  Y   ....    Y Register<br>"
+"  SR  ....    Status Register<br>"
+"  SP  ....    Stack Pointer</code></pre>"
+"<p>The status register (SR) holds the following flags (from bit 7 to 0):</p>"
+"<pre><code>  N   ....    Negative<br>"
+"  V   ....    Overflow<br>"
+"  –   ....    ignored<br>"
+"  B   ....    Break<br>"
+"  D   ....    Decimal<br>"
+"  I   ....    Interrupt (IRQ disable)<br>"
+"  Z   ....    Zero<br>"
+"  C   ....    Carry</code></pre>"
+"<p>The line disassembler shows the current value of PC, the content of the according memory address (the next instruction followed by the operands, if any), and a disassembly of this instruction.</p>"
+"<p>The cycle time display shows the ticks of exceeded CPU time (including extra cycles for branches page transitions).</p>"
+"<h3 id=\"setting-the-registers\">Setting the Registers</h3>"
+"<p>Click a registers label to set its value.<br>"
+"Click on a SR flag to flip its value.</p>"
+"<h3 id=\"memory\">Memory</h3>"
+"<p>The emulator implements 64 k of memory for the full 16 bit address range.<br>"
+"The 6502's stack of 1 k range is located at 0100 to 01FF (hard wired).</p>"
+"<h3 id=\"accessing-the-memory\">Accessing the Memory</h3>"
+"<p>The button \"look up mem #\" offers a quick inspection of a 16 byte range around any address.<br>"
+"You may enter any amount of hex code into the memory inspector's pane and load it to the specified start address.<br>"
+"Further the memory inspector lets you inspect the memory in steps of 128 (0x80) bytes (half page). You may alter the display's content and load it back the emulator's memory. (Any figures prefixed by a colon \":\" are ignored as line numbers.)<br>"
+"The \"show ASCII\" option shows the according ASCII characters at the left of each line (if applicable). Uncheck this when transfering memory to the disassembler.<br>"
+"Last there's an option to load the ROMs of the Commodore 64 (® CBM) to the according addresses (A000-BFFF, D000-FFFF) – for all those who can't help nostalgia. (Note: The emulator does not implement the C64's bank switching feature.)</p>"
+"<h3 id=\"about-the-debugger\">About the Debugger</h3>"
+"<p>The emulator is written in JavaScript and emulates a 65xx-family micro processor unit that was the heart of so popular micro computers as the Apple II (6502) or the Commedore 64 (6510). The most common types, the 6502 and 6510 processors, are basicly the same and share the same instruction tables. (The 6510 varies from 6502 only in the implementation of 6 I/O ports at addresses 0000 and 0001.)<br>"
+"The emulator implements all legal instructions. Undefined opcodes are ignored (treated as NOP, No OPeration, with cycle time 0) – no pseudo-opcodes are implemented.</p>"

_DOCS["PERIPHERALS"] = "<h2 id=\"peripheral-interfacing-explained\">PERIPHERAL interfacing Explained</h2><hr>"
+"<p>As we can ignore the electrical and signal layer of the peripheral interface, our only real concern is software compatibility.<br>"
+"We only need to mind about the memory map dedicated to I/O, called memory-mapped I/O, which is exactly 4K wide  (between $C000 - $D000). Here is an enlarged map of this memory space :</p>"
+"<pre><code>      <div style=width:800px><br>"
+" D000 ┌────────────────────────────────────┐   ▲                  ▲<br>"
+"      │                                    │   │                  │<br>"
+"      │   Open for large ROM programs      │  2048 Bytes HostROM  │<br>"
+"      │   Activated by I/O strobe (pin 20) │   │                  │<br>"
+"      │                                    │   │                  │<br>"
+" C800 ├────────────────────────────────────┤  ─┘                  │<br>"
+"      │                                    │   ▲                  │<br>"
+"      │  RAM/ROM open for slot#7           │   │                  │<br>"
+"      │                                    │  256 Bytes SlotROM   │<br>"
+" C700 ├────────────────────────────────────┤  ─┘                  │<br>"
+"      │                                    │   ▲                  │<br>"
+"      │  RAM/ROM open for slot#6           │   │                  │<br>"
+"      │                                    │  256 Bytes SlotROM   │<br>"
+" C600 ├────────────────────────────────────┤  ─┘                 4096 bytes<br>"
+"      │                                    │   ▲                  │<br>"
+"      │  RAM/ROM open for slot#5           │   │                  │<br>"
+"      │                                    │  256 Bytes SlotROM   │<br>"
+" C500 ├────────────────────────────────────┤  ─┘                  │<br>"
+"      │                                    │   ▲                  │<br>"
+"      │  RAM/ROM open for slot#4           │   │                  │<br>"
+"      │                                    │  256 Bytes SlotROM   │<br>"
+" C400 ├────────────────────────────────────┤  ─┘                  │<br>"
+"      │                                    │   ▲                  │<br>"
+"      │  RAM/ROM open for slot#3           │   │                  │<br>"
+"      │                                    │  256 Bytes SlotROM   │<br>"
+" C300 ├────────────────────────────────────┤  ─┘                  │<br>"
+"      │                                    │   ▲                  │<br>"
+"      │  RAM/ROM open for slot#2           │   │                  │<br>"
+"      │                                    │  256 Bytes SlotROM   │<br>"
+" C200 ├────────────────────────────────────┤  ─┘                  │<br>"
+"      │                                    │   ▲                  │<br>"
+"      │  RAM/ROM open for slot#1           │   │                  │<br>"
+"      │  (No mem mapped for slot#0)        │  256 Bytes SlotROM   │<br>"
+" C100 └────┬───────────────────────────────┤  ─┘                  │<br>"
+"      C0F0 │ I/O slot #7  ─┐               │   ▲                  │<br>"
+"      C0E0 │ I/O slot #6  ─┘ 16 Bytes      │   │                  │<br>"
+"      C0D0 │ I/O slot #5                   │  128 Bytes SlotIO    │<br>"
+"      C0C0 │ I/O slot #4     X 8           │   │                  │<br>"
+"      C0B0 │ I/O slot #3                   │   │                  │<br>"
+"      C0A0 │ I/O slot #2                   │   │                  │<br>"
+"      C090 │ I/O slot #1                   │   │                  │<br>"
+"      C080 │ I/O slot #0                   │   │                  │<br>"
+" C080 ┌────┴───────────────────────────────┤  ─┘                  │<br>"
+"      │  Built-in I/O locations            │   ▲                  │<br>"
+"      │  (keyboard,speaker,casette,game..  │  128 Bytes HostIO    │<br>"
+" C000 └────────────────────────────────────┘  ─┘                  ▼<br>"
+"<br>"
+"<br>"
+"      </div></code></pre>"
+"<h2 id=\"the-16k-language-cards\">The 16K Language cards</h2><hr>"
+"<p>We will discuss two similar cards, with the same functions and same soft switches.</p>"
+"<ul>"
+"<li><a href=\"http://www.applelogic.org/files/LANGCARDMAN.pdf\">Apple Language Card</a>  </li>"
+"<li><a href=\"https://mirrors.apple2.org.za/Apple%20II%20Documentation%20Project/Interface%20Cards/Language%20Cards/Microsoft%2016K%20RAM%20Card/Manuals/Microsoft%20RAMCard%20-%20Manual.pdf\">Microsoft Ramcard</a>  </li>"
+"<li><a href=\"https://usermanual.wiki/Document/ae16kpocketrocketbrochure.1819483971.pdf\">Applied Engineering - Pocket Rocket RamCard</a></li>"
+"</ul>"
+"<p>The only difference between Apple vs Microsoft and others, is that the Apple card overrides KICKSTART ROM addresses F800-FFFF permanently, which only served as a ROM upgrade for old Apple II's. As we emulate the Apple II+, the Kickstart ROM on Apple Language card is bit-by-bit equal with the Kickstart ROM shipped with the Apple II+.  All other functions are identical.</p>"
+"<p><a href=\"https://archive.org/details/Schematic_Diagram_of_the_Apple_II/page/n1/mode/2up\">Apple II+ motherboard schematics</a>"
+"TODO: check which chip has to be removed, and to which address locations this chip corresponds.</p>"
+"<p>Language Card Memory map</p>"
+"<pre><code>      <div style=width:800px><br>"
+" FFFF ┌────────────────┐ - - >┌───────────────┐ - -▲    ▲<br>"
+"      │  KICKSTART ROM │      │               │    │    │<br>"
+" F800 ├────────────────┤      │  RAMCARD RAM  │    8K   │<br>"
+"      │  APPLE ROM     │      │               │    │    │<br>"
+" E000 │                │ - - >├───────────────┤    ▼    │ 16K    <br>"
+"      │                │      │  BANK A or B  │    ▲    │<br>"
+"      │                │      │  (switchable) │  2 X 4K │<br>"
+" D000 ├────────────────┤ - - >└───────────────┘ - -▼    ▼ <br>"
+"      │ large ROM prog │                           ▲ <br>"
+"      │  (unused)      │                           ▼ 2K<br>"
+" C800 ├────────────────┤- - - - - - - - - - - - - -          <br>"
+"      │  SLOT ROM/RAM  │                <br>"
+"      │  (unused)      │              <br>"
+"      │                │             <br>"
+" C100 └──┬─────────────┤                <br>"
+"    C0F0 │ I/O slot #7 │<br>"
+"    C0E0 │ I/O slot #6 │<br>"
+"    C0D0 │ I/O slot #5 │<br>"
+"    C0C0 │ I/O slot #4 │<br>"
+"    C0B0 │ I/O slot #3 │<br>"
+"    C0A0 │ I/O slot #2 │<br>"
+"    C090 │ I/O slot #1 │     ┌─────────────────┐   <br>"
+"    C080 │ I/O slot #0 ├─────┤ 8 soft switches │<br>"
+"         └─────────────┘     └─────────────────┘  <br>"
+"<br>"
+"      </div></code></pre>"
+"<p><a href=\"https://www.youtube.com/watch?v=1KPIAoO1dTU\">video</a>  <br>"
+"<a href=\"https://mirrors.apple2.org.za/Apple%20II%20Documentation%20Project/Interface%20Cards/Language%20Cards/Apple%20Language%20Card/Schematics/Apple%20Language%20Card%20-%20Schematics%20050-0019-01.pdf\">schematics</a> </p>"
+"<table>"
+"<thead>"
+"<tr>"
+"<th id=\"language_card_soft_switches\">Language card soft switches</th>"
+"</tr>"
+"</thead>"
+"<tbody>"
+"</tbody>"
+"</table>"
+"<table>"
+"<thead>"
+"<tr>"
+"<th id=\"address\" style=\"text-align:center;\">Address</th>"
+"<th id=\"rom\">ROM</th>"
+"<th id=\"ramcard\">RAMCARD</th>"
+"<th id=\"banka\">BANKA</th>"
+"<th id=\"bankb\">BANKB</th>"
+"<th id=\"description\">Description</th>"
+"</tr>"
+"</thead>"
+"<tbody>"
+"<tr>"
+"<td style=\"text-align:center;\">C080</td>"
+"<td></td>"
+"<td>R</td>"
+"<td></td>"
+"<td>R</td>"
+"<td>write-protect</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">*C081</td>"
+"<td>R</td>"
+"<td>W</td>"
+"<td></td>"
+"<td>W</td>"
+"<td>write (access 2x)</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">C082</td>"
+"<td>R</td>"
+"<td></td>"
+"<td></td>"
+"<td></td>"
+"<td>ROM-only</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">C083</td>"
+"<td></td>"
+"<td>R/W</td>"
+"<td></td>"
+"<td>R/W</td>"
+"<td>write (access 2x)</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">C088</td>"
+"<td></td>"
+"<td>R</td>"
+"<td>R</td>"
+"<td></td>"
+"<td>write-protect</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">C089</td>"
+"<td>R</td>"
+"<td>W</td>"
+"<td>W</td>"
+"<td></td>"
+"<td>write (access 2x)</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">C08A</td>"
+"<td>R</td>"
+"<td></td>"
+"<td></td>"
+"<td></td>"
+"<td>ROM-only</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">C08B</td>"
+"<td></td>"
+"<td>R/W</td>"
+"<td>R/W</td>"
+"<td></td>"
+"<td>write (access 2x)</td>"
+"</tr>"
+"</tbody>"
+"</table>"
+"<p>* default setting after cold boot</p>"
+"<h3 id=\"testing\">Testing</h3>"
+"<p><a href=\"http://www.ivanhogan.com/kfest/MemUtil/\">http://www.ivanhogan.com/kfest/MemUtil/</a></p>"

_DOCS["PERIPHERALS"] = "<h2 id=\"peripheral-interfacing-explained\">PERIPHERAL interfacing Explained</h2><hr>"
+"<p>As we can ignore the electrical and signal layer of the peripheral interface, our only real concern is software compatibility.<br>"
+"We only need to mind about the memory map dedicated to I/O, called memory-mapped I/O, which is exactly 4K wide  (between $C000 - $D000). Here is an enlarged map of this memory space :</p>"
+"<pre><code>      <div style=width:800px><br>"
+" D000 ┌────────────────────────────────────┐   ▲                  ▲<br>"
+"      │                                    │   │                  │<br>"
+"      │   Open for large ROM programs      │  2048 Bytes HostROM  │<br>"
+"      │   Activated by I/O strobe (pin 20) │   │                  │<br>"
+"      │                                    │   │                  │<br>"
+" C800 ├────────────────────────────────────┤  ─┘                  │<br>"
+"      │                                    │   ▲                  │<br>"
+"      │  RAM/ROM open for slot#7           │   │                  │<br>"
+"      │                                    │  256 Bytes SlotROM   │<br>"
+" C700 ├────────────────────────────────────┤  ─┘                  │<br>"
+"      │                                    │   ▲                  │<br>"
+"      │  RAM/ROM open for slot#6           │   │                  │<br>"
+"      │                                    │  256 Bytes SlotROM   │<br>"
+" C600 ├────────────────────────────────────┤  ─┘                 4096 bytes<br>"
+"      │                                    │   ▲                  │<br>"
+"      │  RAM/ROM open for slot#5           │   │                  │<br>"
+"      │                                    │  256 Bytes SlotROM   │<br>"
+" C500 ├────────────────────────────────────┤  ─┘                  │<br>"
+"      │                                    │   ▲                  │<br>"
+"      │  RAM/ROM open for slot#4           │   │                  │<br>"
+"      │                                    │  256 Bytes SlotROM   │<br>"
+" C400 ├────────────────────────────────────┤  ─┘                  │<br>"
+"      │                                    │   ▲                  │<br>"
+"      │  RAM/ROM open for slot#3           │   │                  │<br>"
+"      │                                    │  256 Bytes SlotROM   │<br>"
+" C300 ├────────────────────────────────────┤  ─┘                  │<br>"
+"      │                                    │   ▲                  │<br>"
+"      │  RAM/ROM open for slot#2           │   │                  │<br>"
+"      │                                    │  256 Bytes SlotROM   │<br>"
+" C200 ├────────────────────────────────────┤  ─┘                  │<br>"
+"      │                                    │   ▲                  │<br>"
+"      │  RAM/ROM open for slot#1           │   │                  │<br>"
+"      │  (No mem mapped for slot#0)        │  256 Bytes SlotROM   │<br>"
+" C100 └────┬───────────────────────────────┤  ─┘                  │<br>"
+"      C0F0 │ I/O slot #7  ─┐               │   ▲                  │<br>"
+"      C0E0 │ I/O slot #6  ─┘ 16 Bytes      │   │                  │<br>"
+"      C0D0 │ I/O slot #5                   │  128 Bytes SlotIO    │<br>"
+"      C0C0 │ I/O slot #4     X 8           │   │                  │<br>"
+"      C0B0 │ I/O slot #3                   │   │                  │<br>"
+"      C0A0 │ I/O slot #2                   │   │                  │<br>"
+"      C090 │ I/O slot #1                   │   │                  │<br>"
+"      C080 │ I/O slot #0                   │   │                  │<br>"
+" C080 ┌────┴───────────────────────────────┤  ─┘                  │<br>"
+"      │  Built-in I/O locations            │   ▲                  │<br>"
+"      │  (keyboard,speaker,casette,game..  │  128 Bytes HostIO    │<br>"
+" C000 └────────────────────────────────────┘  ─┘                  ▼<br>"
+"<br>"
+"<br>"
+"      </div></code></pre>"
+"<h2 id=\"the-16k-language-cards\">The 16K Language cards</h2><hr>"
+"<p>We will discuss two similar cards, with the same functions and same soft switches.</p>"
+"<ul>"
+"<li><a href=\"http://www.applelogic.org/files/LANGCARDMAN.pdf\">Apple Language Card</a>  </li>"
+"<li><a href=\"https://mirrors.apple2.org.za/Apple%20II%20Documentation%20Project/Interface%20Cards/Language%20Cards/Microsoft%2016K%20RAM%20Card/Manuals/Microsoft%20RAMCard%20-%20Manual.pdf\">Microsoft Ramcard</a>  </li>"
+"<li><a href=\"https://usermanual.wiki/Document/ae16kpocketrocketbrochure.1819483971.pdf\">Applied Engineering - Pocket Rocket RamCard</a></li>"
+"</ul>"
+"<p>The only difference between Apple vs Microsoft and others, is that the Apple card overrides KICKSTART ROM addresses F800-FFFF permanently, which only served as a ROM upgrade for old Apple II's. As we emulate the Apple II+, the Kickstart ROM on Apple Language card is bit-by-bit equal with the Kickstart ROM shipped with the Apple II+.  All other functions are identical.</p>"
+"<p><a href=\"https://archive.org/details/Schematic_Diagram_of_the_Apple_II/page/n1/mode/2up\">Apple II+ motherboard schematics</a>"
+"TODO: check which chip has to be removed, and to which address locations this chip corresponds.</p>"
+"<p>Language Card Memory map</p>"
+"<pre><code>      <div style=width:800px><br>"
+" FFFF ┌────────────────┐ - - >┌───────────────┐ - -▲    ▲<br>"
+"      │  KICKSTART ROM │      │               │    │    │<br>"
+" F800 ├────────────────┤      │  RAMCARD RAM  │    8K   │<br>"
+"      │  APPLE ROM     │      │               │    │    │<br>"
+" E000 │                │ - - >├───────────────┤    ▼    │ 16K    <br>"
+"      │                │      │  BANK A or B  │    ▲    │<br>"
+"      │                │      │  (switchable) │  2 X 4K │<br>"
+" D000 ├────────────────┤ - - >└───────────────┘ - -▼    ▼ <br>"
+"      │ large ROM prog │                           ▲ <br>"
+"      │  (unused)      │                           ▼ 2K<br>"
+" C800 ├────────────────┤- - - - - - - - - - - - - -          <br>"
+"      │  SLOT ROM/RAM  │                <br>"
+"      │  (unused)      │              <br>"
+"      │                │             <br>"
+" C100 └──┬─────────────┤                <br>"
+"    C0F0 │ I/O slot #7 │<br>"
+"    C0E0 │ I/O slot #6 │<br>"
+"    C0D0 │ I/O slot #5 │<br>"
+"    C0C0 │ I/O slot #4 │<br>"
+"    C0B0 │ I/O slot #3 │<br>"
+"    C0A0 │ I/O slot #2 │<br>"
+"    C090 │ I/O slot #1 │     ┌─────────────────┐   <br>"
+"    C080 │ I/O slot #0 ├─────┤ 8 soft switches │<br>"
+"         └─────────────┘     └─────────────────┘  <br>"
+"<br>"
+"      </div></code></pre>"
+"<p><a href=\"https://www.youtube.com/watch?v=1KPIAoO1dTU\">video</a>  <br>"
+"<a href=\"https://mirrors.apple2.org.za/Apple%20II%20Documentation%20Project/Interface%20Cards/Language%20Cards/Apple%20Language%20Card/Schematics/Apple%20Language%20Card%20-%20Schematics%20050-0019-01.pdf\">schematics</a> </p>"
+"<table>"
+"<thead>"
+"<tr>"
+"<th id=\"language_card_soft_switches\">Language card soft switches</th>"
+"</tr>"
+"</thead>"
+"<tbody>"
+"</tbody>"
+"</table>"
+"<table>"
+"<thead>"
+"<tr>"
+"<th id=\"address\" style=\"text-align:center;\">Address</th>"
+"<th id=\"rom\">ROM</th>"
+"<th id=\"ramcard\">RAMCARD</th>"
+"<th id=\"banka\">BANKA</th>"
+"<th id=\"bankb\">BANKB</th>"
+"<th id=\"description\">Description</th>"
+"</tr>"
+"</thead>"
+"<tbody>"
+"<tr>"
+"<td style=\"text-align:center;\">C080</td>"
+"<td></td>"
+"<td>R</td>"
+"<td></td>"
+"<td>R</td>"
+"<td>write-protect</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">*C081</td>"
+"<td>R</td>"
+"<td>W</td>"
+"<td></td>"
+"<td>W</td>"
+"<td>write (access 2x)</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">C082</td>"
+"<td>R</td>"
+"<td></td>"
+"<td></td>"
+"<td></td>"
+"<td>ROM-only</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">C083</td>"
+"<td></td>"
+"<td>R/W</td>"
+"<td></td>"
+"<td>R/W</td>"
+"<td>write (access 2x)</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">C088</td>"
+"<td></td>"
+"<td>R</td>"
+"<td>R</td>"
+"<td></td>"
+"<td>write-protect</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">C089</td>"
+"<td>R</td>"
+"<td>W</td>"
+"<td>W</td>"
+"<td></td>"
+"<td>write (access 2x)</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">C08A</td>"
+"<td>R</td>"
+"<td></td>"
+"<td></td>"
+"<td></td>"
+"<td>ROM-only</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">C08B</td>"
+"<td></td>"
+"<td>R/W</td>"
+"<td>R/W</td>"
+"<td></td>"
+"<td>write (access 2x)</td>"
+"</tr>"
+"</tbody>"
+"</table>"
+"<p>* default setting after cold boot</p>"
+"<h3 id=\"testing\">Testing</h3>"
+"<p><a href=\"http://www.ivanhogan.com/kfest/MemUtil/\">http://www.ivanhogan.com/kfest/MemUtil/</a></p>"

_DOCS["TOOLS"] = "<h2 id=\"tools-explained\">TOOLS Explained</h2><hr>"
+"<p>In the <a href=\"../tools\">tools folder</a>, we keep a collection of helpers to simulate, better understand or automate processes supporting the development of the IDE.  Every tool is designed to run in the browser, just like the IDE, using HTML/CSS/JavaScript.  Discover here the entire <a href=\"https://retroapplejs.github.io/tools/TOOLS_CATALOG.html\">TOOLS CATALOG</a>.</p>"
+"<h3 id=\"configfile_updaterhtml\">ConfigFile_updater.html</h3>"
+"<p>Check documentation here : <a href=\"CONFIG.md\">CONFIG.md</a></p>"
+"<h3 id=\"monitor_palettehtml\">Monitor_palette.html</h3>"
+"<p><img src=\"https://github.com/RetroAppleJS/RetroAppleJS.github.io/raw/main/res/palette.png\" width=30% align=left />Color graphics on the Apple II rendered only 4 distinct colors in high-resolution (green, orange, violet, blue) as a result of a cheap but smart piece of discrete logic.  Surely, owners of monochrome green or amber monitors sometimes longed for some color, but the blurry and color-bleeding TV screen rendering was more like a gimmick compared to the razor-sharp image produced by a genuine monochrome apple monitor.</p>"
+"<p>The emulator's display offers an easy switching capability to render color, black&white, green and amber as some graphics really look nicer in color or monochrome.  e.g. fonts rendered on a hires screen produce very disturbing color fringing artifacts, which make the letters unreadable in color mode; any monochrome setting is more appropriate in this case. </p>"
+"<p>This tool was made to test and assure the best image rendering approximation with these respective monitors.<br>"
+"It produces a Javascript snippet that seamlessly maps the Apple II colors to the different monochrome versions.  This snippet is located in <a href=\"..fhttps://github.com/RetroAppleJS/RetroAppleJS.github.io/raw/main/https://github.com/RetroAppleJS/RetroAppleJS.github.io/raw/main/res/EMU_apple2video.js\">EMU_apple2video.js</a>.</p>"
+"<h3 id=\"hgrpatternjshtml\">HGRpatternJS.html</h3>"
+"<p><img src=\"https://github.com/RetroAppleJS/RetroAppleJS.github.io/raw/main/res/HGRpatternJS.png\" align=left width=40% style=\"padding:10px 10px 10px 10px\"/><a href=\"https://retroapplejs.github.io/tools/HGRpatternJS.html\">This tool</a> is designed to find a color encoding strategy to tackle the typical challenges with Apple II HGR graphics. </p>"
+"<p>Major challenges to picture quality are:</p>"
+"<ul>"
+"<li>extreme color limitations (4 true colors + black and white)</li>"
+"<li>a high-bit color switch ruling over an entire byte</li>"
+"<li>convolutional color encoding</li>"
+"<li>low pixel resolution (at today's standards)</li>"
+"</ul>"
+"<p>Classic dithering algorithms as we know, simply can't cope well with all the weird stuff that happens on pixel level in an Apple II.  Trying dissociate a <strong>color-encoding layer</strong> and a <strong>pattern encoding  layer</strong> is challenging, both are seriously messed-up.  Most dithering patterns become colors, and generic color dithering algorithms can't handle anamorphous color pallettes.  While  black-and-White dithering can be achieved by means of a simple trick, <strong>any color dithering algorithm known so far, regular or error-diffusion-based, need to be re-invented</strong>.</p>"
+"<p>Please check this <a href=\"https://retroapplejs.github.io/tools/HGRpatternJS.html\">small app</a>, especially designed to examine achievable colors for regular dithering by generating any imaginable bit pattern. Small patches or blocks of pixels, will reveal interesting features in both layers.  Since the color encoding layer has a size of 2x1 bits (wxh), in a full resolution of 280x192, e.g. rendering 4 colors + black and white brings us already down to a color resolution of only 140x192.</p>"
+"<p>Block size 2x2 bits<br>"
+"<img src=\"https://github.com/RetroAppleJS/RetroAppleJS.github.io/raw/main/res/pattern_block_2x2.png\" width=20% align=left /></p>"
+"<p>Block size 4x2 bits<br>"
+"<img src=\"https://github.com/RetroAppleJS/RetroAppleJS.github.io/raw/main/res/pattern_block_4x2.png\" width=20% align=left /></p>"
+"<p>The pattern encoding layer can only bare multiples of the color encoding block size, bringing us to a minimal size of 2x2 bits (wxh), and the next being 4x2 bits (wxh).  In the next figure, we identify color encoding conflicts.</p>"
+"<p>Color conflics at block size 2x2 bits<br>"
+"<img src=\"https://github.com/RetroAppleJS/RetroAppleJS.github.io/raw/main/res/pattern_block_conflicts_2x2.png\" width=20% align=left /></p>"
+"<p>Color conflics at block size 4x2 bits<br>"
+"<img src=\"https://github.com/RetroAppleJS/RetroAppleJS.github.io/raw/main/res/pattern_block_conflicts_4x2.png\" width=20% align=left /></p>"
+"<p>Note the high-bit on the right side, turned on or off generates different color conflicts.  According to classic dithering practice, these conflicts should be resolved by any means to keep a minimal color deviation.</p>"
+"<p>The amount of combinations one can get is quite decent, but this testing tool proves that some bit pattern combinations render exactly the same average color.  In theory, these repetitions could be removed, but we have to check other aspects before doing so.  In practice, we have to deal with color encoding conflics that can occur on byte-level.  We still have 7 visible bits per byte ammended by one inivisible high-bit.  Situations where a high-bit selector should be =1 in the lower nibble and =0 for the higher nibble, these can be resolved by picking an alternate dithering pattern in the lower nibble or the higher nibble to resolve the conflict.  We can additionally reduce the statistical chance for such conflicts by chosing for the larger block size.</p>"
+"<p>In our conclusion, we are putting together color resolution, color conflict sensitivity and color range :</p>"
+"<ul>"
+"<li>color block size 2x1 bits (wxh)<ul>"
+"<li>color resolution = 140x96</li>"
+"<li>no color conflics - by ruling out conflictual pattern blocks</li>"
+"<li>bit combinations = 2 ^ (2 visible bits + 1 high bit) = 8</li>"
+"<li>net usable color range - 4 distinct colors + black and white</li></ul></li>"
+"<li>pattern block size 2x2 bits (wxh)<ul>"
+"<li>color resolution = 140x96</li>"
+"<li>3 possible high-bit color conflicts between pattern blocks in the same byte</li>"
+"<li>statistical chance for color conflics = (5/7-2/7)/2 = 0.714 - 0.286 / 2 = 21 %</li>"
+"<li>bit combinations = 2 ^ (4 visible bits + 2 high bits) = 64</li>"
+"<li>net usable color range - 19 distinct colors + black and white</li></ul></li>"
+"<li>pattern block size 4x2 bits (wxh)<ul>"
+"<li>color resolution = 70x96</li>"
+"<li>1 possible high-bit color conflict between pattern blocks in the same byte</li>"
+"<li>statistical chance for color conflics = (3/7-4/7)/2 = 0.429 - 0.571 / 2 = 14 %</li>"
+"<li>bit combinations = 2 ^ (8 visible bits + 2 high biths) = 1024</li>"
+"<li>net usable color range - ? distinct colors + black and white</li></ul></li>"
+"<li>mixed mode block size 2x2 and 4x4 bits (wxh)<ul>"
+"<li>average color resolution = 105x95</li>"
+"<li>3 possible high-bit color conflicts between pattern blocks in the same byte</li>"
+"<li>statistical change for color conflicts = (21%+14%)/2 = 17.5%</li>"
+"<li>bit combinations = 2 ^ (8 vsible bits + 2 high bits) = 1024</li>"
+"<li>net usable color range - ? distinct colors + black and white</li></ul></li>"
+"</ul>"
+"<h4 id=\"pattern-selector\">Pattern selector</h4>"
+"<p>Patterns are generated by two formulas, the first reporting true (bit=1) or false (bit=0) on the visible bits 0-7 and another formula reporting 0 or 127 for the invisible bit 7.  The pattern selector has a double function: selected patterns can be edited and loaded into the first bitmap grid (left pane) and by means of the Generate_HGR button also visualised in the first location of the pattern grid (right pane).</p>"
+"<table>"
+"<thead>"
+"<tr>"
+"<th id=\"bit7\" style=\"text-align:center;\">bit7</th>"
+"<th id=\"bit6\" style=\"text-align:center;\">bit6</th>"
+"<th id=\"bit5\" style=\"text-align:center;\">bit5</th>"
+"<th id=\"bit4\" style=\"text-align:center;\">bit4</th>"
+"<th id=\"bit3\" style=\"text-align:center;\">bit3</th>"
+"<th id=\"bit2\" style=\"text-align:center;\">bit2</th>"
+"<th id=\"bit1\" style=\"text-align:center;\">bit1</th>"
+"<th id=\"bit0\" style=\"text-align:right;\">bit0</th>"
+"</tr>"
+"</thead>"
+"<tbody>"
+"<tr>"
+"<td style=\"text-align:center;\">high bit</td>"
+"<td style=\"text-align:center;\">even</td>"
+"<td style=\"text-align:center;\">odd</td>"
+"<td style=\"text-align:center;\">even</td>"
+"<td style=\"text-align:center;\">odd</td>"
+"<td style=\"text-align:center;\">even</td>"
+"<td style=\"text-align:center;\">odd</td>"
+"<td style=\"text-align:right;\">even</td>"
+"</tr>"
+"</tbody>"
+"</table>"
+"<h4 id=\"color-gamut\">Color gamut</h4>"
+"<ul>"
+"<li>switch: 0 selects a pallette of green and violet, and 1 selects a pallet of orange and blue for all 7 visible pixels in bits 0-6</li>"
+"<li>convolutional logic</li>"
+"</ul>"
+"<table>"
+"<thead>"
+"<tr>"
+"<th id=\"<<left\" style=\"text-align:center;\"><<left</th>"
+"<th id=\"even_bit\" style=\"text-align:center;\">even bit</th>"
+"<th id=\"right>>\" style=\"text-align:center;\">right>></th>"
+"<th id=\"\" style=\"text-align:center;\"></th>"
+"<th id=\"<<left\" style=\"text-align:center;\"><<left</th>"
+"<th id=\"odd_bit\" style=\"text-align:center;\">odd bit</th>"
+"<th id=\"right>>\" style=\"text-align:center;\">right>></th>"
+"</tr>"
+"</thead>"
+"<tbody>"
+"<tr>"
+"<td style=\"text-align:center;\">1</td>"
+"<td style=\"text-align:center;\">0</td>"
+"<td style=\"text-align:center;\">1</td>"
+"<td style=\"text-align:center;\"></td>"
+"<td style=\"text-align:center;\">1</td>"
+"<td style=\"text-align:center;\">0</td>"
+"<td style=\"text-align:center;\">1</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\"></td>"
+"<td style=\"text-align:center;\">0</td>"
+"<td style=\"text-align:center;\"></td>"
+"<td style=\"text-align:center;\"></td>"
+"<td style=\"text-align:center;\">1</td>"
+"<td style=\"text-align:center;\">0</td>"
+"<td style=\"text-align:center;\">1</td>"
+"</tr>"
+"</tbody>"
+"</table>"
+"<h3 id=\"converhgrhtml\">ConverHGR.html</h3>"
+"<p><img src=\"https://github.com/RetroAppleJS/RetroAppleJS.github.io/raw/main/res/HGR_Venus.png\" align=left width=30% />This handy tool converts the most common image file types to an Apple II HGR color bitmaps.  Dithering achieves a way to convert images from high color-depths to lower depths, but Apple II graphics require a special twist to gracefully overcome inherent 'Wozniackian' artifacts explained in <em>PatternHGR.html</em>.   Buttons and tuning sliders will help you model the most acceptable conversion.  For developers, the challenge will be to optimize conversion quality and speed, as this very algorithm will serve inside the webcam capture tool.</p>"
+"<p>TODO: this is only a preliminary version, most features associated with color encoding remain to be implemented.  We are waiting for the completion of the HGRpatternJS.html tool for the most optimal dithering algorithm.<br>"
+"<br><br></p>"
+"<h3 id=\"camera_capturehtml\">Camera_capture.html</h3>"
+"<p><img src='https://github.com/RetroAppleJS/RetroAppleJS.github.io/raw/main/res/camera.png' align=left width=20% />"
+"The camera capture tool enables your default laptops camera, and transform that into an Apple II graphics bitmap. The image trasformation can be optimised or tweaked by means of several parameters like dithering options, color corrections, brightness and contast. The bitmap can be exported as a hex number stream that can be pasted directly into the assembler prompt which, puts all image data right at it's graphics mapped I/O locations.<br>"
+"<br><br></p>"
+"<h3 id=\"diskjshtml\">DiskJS.html</h3>"
+"<p><img src=\"https://github.com/RetroAppleJS/RetroAppleJS.github.io/raw/main/res/apple-disk-ii_256.png\" align=left width=30% />The emulator natively works with <strong>.nib formatted disk images</strong>.  Therefore, it can read .nib files from your local hard drive to the emulator's memory and download .nib files raw from memory.   The emulator also accepts loading .dsk image files, but it always does that by converting from .dsk format to .nib before storing the image in memory.<br>"
+"This tool does the same thing, plus some extra functions like making a full hex dump and displaying a (16x35) heat map laying out 16 columns (sectors) and 35 rows (tracks).</p>"
+"<p>A \"GCR table\" button shows an essential feature of the NIB data arrangement: an encoding method for magnetic media.   While the DSK file format is a sequence of all the logical byte information on a disk, arranged per track and sector, the NIB format reflects the digital signal picked up from the magnetic track on the disk, which contains a few extras besides pure data.  During the design of the Apple II disk drive and interface card, a clever workaround was found to overcome the high cost associated with <strong>hard sector formatting</strong> that, besides additional sensors, required extra driver chips to ensure accurate spin control and magnetic data localisation.  <strong>Soft sector formatting</strong> requires writing some extra bits on the disk to keep the location of the magnetic bits in sync with expected time windows for magnetic pickup.  GCR = Group Code Recording allows this soft alignment encoding, which works best by applying two rules.  </p>"
+"<ul>"
+"<li>Rule #1: Every byte starts with a bit that is always 1.  Hence, every byte has at least one firm sync reminder.</li>"
+"<li>Rule #2: Only up to two subsequent zeroes.  </li>"
+"</ul>"
+"<p>The genuine GCR part applies to the seven remaining bits.  Since all other ones also keep the pickup windows in check, more than two subsequent zeroes would already cause unacceptable deviations.  In the table on the left, we computed 81 compliant combinations, from which only 64 finally encoded six usable bits (throwing away 17 combinations).  On the right, the table of 64 values is shown as extracted from a lookup table generated in RAM ($036C-$03D5) by 32 bytes of Woz wizardry on the Apple II interface card ROM.  Counting sequences of zero bits in machine code or worse, storing all 64 bytes of lookup table in card ROM would have been overkill. </p>"
+"<pre>"
+"; GCR lookup table builder (values 0-63)<br>"
+"; writing from 036C > 03D5<br>"
+"<br>"
+"ORG   $Cn00                 ; n = slot number<br>"
+"DOS.1 = $3C<br>"
+"<br>"
+"        LDX   #$20          ; 32<br>"
+"        LDY   #$00<br>"
+"        LDX   #$03<br>"
+"L01     STX   *DOS.1        ; Store X in DOS register<br>"
+"        TXA<br>"
+"        ASL   A            ; *2<br>"
+"        BIT   *DOS.1        ; AND ACC with DOS register <br>"
+"        BEQ   L03        ; JUMP IF ZERO <br>"
+"        ORA   *DOS.1        ; OR ACC with DOS register >> put back in ACC<br>"
+"        EOR   #$FF          ; %11111111 invert all ACC bits <br>"
+"        AND   #$7E          ; %01111110 remove first & last bit of ACC<br>"
+"L02     BCS   L03<br>"
+"        LSR   A   <br>"
+"        BNE   L02<br>"
+"        TYA <br>"
+"        STA   $0356,X       ; write in lookup table<br>"
+"        INY  <br>"
+"L03     INX   <br>"
+"        BPL   L01<br>"
+"</pre>"
+"<h3 id=\"sidchipjshtml\">SIDchipJS.html</h3>"
+"<p><img src=\"https://github.com/RetroAppleJS/RetroAppleJS.github.io/raw/main/res/SID_chips.png\" align=left width=30% />While emulating AppleII sound is not working out, let's put to work a crazy idea of emulating a C64-style SID chip that could bring us closer to emulating a peripheral that actually did exist for the Apple II: the <a href=\"https://en.wikipedia.org/wiki/Mockingboard\">Mockingboard</a> sound card. The Mochinboard used the AY-3-8910, a 3-voice sound chip found in the popular MSX, and later ZX Spectrum home computers.  As we speak, I am evaluating <a href=\"https://github.com/alexanderk23/ayumi-js\">a closer match to emulating the AY-3-8910 with JavaScript</a>, as this could bring us to real software and a few games on the Apple II that made full use of the mockingboards capabilities.</p>"
+"<hr />"
+"<h2 id=\"gui-modules-explained\">GUI MODULES Explained</h2><hr>"
+"<p>Similar to the tool catalog demonstrating particular emulator functions, the GUI modules focus on the development of GUI components like tabs, memory maps, visual keyboard. Discover here the entire <a href=\"https://retroapplejs.github.io/tools/GUI_CATALOG.html\">GUI CATALOG</a>.</p>"
+"<h3 id=\"fontjshtml\">FontJS.html</h3>"
+"<p>Pictograms from Fontawesome are widely used in this project to generate all sorts of buttons.<br>"
+"Not all codes generate visible pictograms, therefore this tool to see which are usable and which are not.  </p>"
+"<h3 id=\"tab_ctrl_vhtml\">Tab_ctrl_v*.html</h3>"
+"<p>This is a fully client-side tab controller that remembers the last clicked tab after a page reload, based on the URI fragment identifier.  e.g. <a href=\"http://www.example.com/index.html#tab1\">www.example.com/index.html#tab1</a>"
+"Subsequent versions of this tab control show increasingly interesting capabilities and design options.</p>"
+"<table>"
+"<thead>"
+"<tr>"
+"<th id=\"\" style=\"text-align:center;\"></th>"
+"<th id=\"pop-out<br>menu\" style=\"text-align:center;\">pop-out<br>menu</th>"
+"<th id=\"sub-<br>menu\" style=\"text-align:center;\">sub-<br>menu</th>"
+"<th id=\"anima-<br>tion\" style=\"text-align:center;\">anima-<br>tion</th>"
+"</tr>"
+"</thead>"
+"<tbody>"
+"<tr>"
+"<td style=\"text-align:center;\">v0</td>"
+"<td style=\"text-align:center;\">-</td>"
+"<td style=\"text-align:center;\">-</td>"
+"<td style=\"text-align:center;\">-</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">v1</td>"
+"<td style=\"text-align:center;\">YES</td>"
+"<td style=\"text-align:center;\">-</td>"
+"<td style=\"text-align:center;\">-</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">v2</td>"
+"<td style=\"text-align:center;\">YES</td>"
+"<td style=\"text-align:center;\">YES</td>"
+"<td style=\"text-align:center;\">-</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:center;\">v3</td>"
+"<td style=\"text-align:center;\">-</td>"
+"<td style=\"text-align:center;\"></td>"
+"<td style=\"text-align:center;\">YES</td>"
+"</tr>"
+"</tbody>"
+"</table>"

_DOCS["ASSEMBLER"] = "<h2 id=\"assembler-instructions\">ASSEMBLER Instructions</h2><hr>"
+"<p>This is a simple 2 pass assembler for the 65xx microprocessor. It is thought to accompany the emulator To get your source code compiled:</p>"
+"<ol>"
+"<li>Enter your src in \"source code\" pane.</li>"
+"<li>Click the button \"assemble\".</li>"
+"<li>Watch progress in \"listing\" pane.</li>"
+"<li>Copy the object code \"to emulator\" or \"to debugger\"<br></li>"
+"</ol>"
+"<h3 id=\"syntax-reference\">Syntax reference</h3>"
+"<p>Unlike other 6502 assemblers; this retrocomuting project was characterised to support a multitude of assembler syntaxes, allowing to copy old listings from internet sources and old magazines and bring them back to life. Whereas the notation of 6502 commands remains constant between compilers, pragmas, also called assembler directives can be quite distinct in nature. In this journey we're making an attempt to support the following well-documented macro-assemblers available for the 6502 microprocessor: <a href=\"\">ca65](http://john.ccac.rwth-aachen.de:8000/as/as_EN.html), [Macroassembler AS (ASL)</a>, <a href=\"https://dasm-assembler.github.io\">DASM</a>, <a href=\"https://mirrors.apple2.org.za/ftp.apple.asimov.net/documentation/applications/misc/Merlin%20-%20A%20Macro%20Assembler%20%28SDS%2C%201983%29%20OCR.pdf\">Merlin</a> and <a href=\"https://www.mixinc.net/atari/mac65.htm\">MAC/65</a>.</p>"
+"<h2 id=\"assembler-pragmas\">ASSEMBLER Pragmas</h2><hr>"
+"<table>"
+"<thead>"
+"<tr>"
+"<th id=\"argument\" style=\"text-align:left;\">Argument</th>"
+"<th id=\"description\" style=\"text-align:left;\">Description</th>"
+"</tr>"
+"</thead>"
+"<tbody>"
+"<tr>"
+"<td style=\"text-align:left;\">adrw</td>"
+"<td style=\"text-align:left;\">address bus width</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:left;\">bpe</td>"
+"<td style=\"text-align:left;\">bits per element</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:left;\">csv</td>"
+"<td style=\"text-align:left;\">0=single (default)<br>1=comma separated</td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:left;\">typ</td>"
+"<td style=\"text-align:left;\">exp = expression (default), hex = hex number</td>"
+"</tr>"
+"</tbody>"
+"</table>"
+"<table>"
+"<thead>"
+"<tr>"
+"<th id=\"[directive]\" style=\"text-align:left;\">[DIRECTIVE]</th>"
+"<th id=\"arguments\" style=\"text-align:left;\">Arguments</th>"
+"<th id=\"(partial)_/_full<br>support\" style=\"text-align:left;\">(Partial) / Full<br>support</th>"
+"<th id=\"description\" style=\"text-align:left;\">Description</th>"
+"</tr>"
+"</thead>"
+"<tbody>"
+"<tr>"
+"<td style=\"text-align:left;\">.BYTE,DFB</td>"
+"<td style=\"text-align:left;\">E { <strong>csv</strong>:{<strong>typ</strong>:exp, <strong>bpe</strong>:8}}</td>"
+"<td style=\"text-align:left;\">ca65,Merlin</td>"
+"<td style=\"text-align:left;\"><a href=\"https://cc65.github.io/doc/ca65.html#ss11.10\">link</a></td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:left;\">.ORG,ORG,*=</td>"
+"<td style=\"text-align:left;\">E { <strong>exp</strong>:{<strong>bpe</strong>:adrw}</td>"
+"<td style=\"text-align:left;\">ca65</td>"
+"<td style=\"text-align:left;\"><a href=\"https://cc65.github.io/doc/ca65.html#.ORG\">link</a></td>"
+"</tr>"
+"<tr>"
+"<td style=\"text-align:left;\">HEX</td>"
+"<td style=\"text-align:left;\">E { <strong>ssv</strong>:{<strong>typ</strong>:hex,<strong>bpe</strong>:8}</td>"
+"<td style=\"text-align:left;\">Merlin</td>"
+"<td style=\"text-align:left;\"></td>"
+"</tr>"
+"</tbody>"
+"</table>"
+"<h4 id=\"opcodes-and-addressing\">Opcodes and Addressing</h4>"
+"<p>Opcodes are always 3 letter mnemonics followed by an (optional) operand/address:</p>"
+"<pre><code>  OPC         ....    implied                 (mode 0)<br>"
+"  OPC A       ....    Accumulator             (mode 1)<br>"
+"  OPC #BB     ....    immediate               (mode 2)<br>"
+"  OPC HHLL    ....    absolute                (mode 3)<br>"
+"  OPC HHLL,X  ....    absolute, X-indexed     (mode 4)<br>"
+"  OPC HHLL,Y  ....    absolute, Y-indexed     (mode 5)<br>"
+"  OPC *LL     ....    zeropage                (mode 6)<br>"
+"  OPC *LL,X   ....    zeropage, X-indexed     (mode 7)<br>"
+"  OPC *LL,Y   ....    zeropage, Y-indexed     (mode 8)<br>"
+"  OPC (BB,X)  ....    X-indexed, indirect     (mode 9)<br>"
+"  OPC (LL),Y  ....    indirect, Y-indexed     (mode 10)<br>"
+"  OPC (HHLL)  ....    indirect                (mode 11)<br>"
+"  OPC BB      ....    relative                (mode 12)</code></pre>"
+"<p>Where HHLL is a 16bit word and LL or BB an 8 bit byte, and A is Accumulator (not mandatory unless ambiguous).<br>"
+"There must not be any white space in any part of an instruction's address.</p>"
+"<h4 id=\"number-formats\">Number Formats</h4>"
+"<pre><code>  $[0-9A-Fa-f] ....  hex<br>"
+" %[01]        ....   binary<br>"
+" 0[0-7]       ....   octal<br>"
+" [0-9]        ....   decimal<br>"
+" <            ....   LO-byte portion<br>"
+" >            ....   HI-byte portion</code></pre>"
+"<h4 id=\"labels-and-identifiers\">Labels and Identifiers</h4>"
+"<p>Identifiers must begin with a letter [A-Za-z] and contain capital or lowercase letters, digits, and the underscore [A-Za-z0-9_]. Only the first 6 characters are significant.</p>"
+"<p>All identifiers, numbers, opcodes, and pragmas are case insensitive and translated to upper case. Identifiers must not be the same as valid opcodes.</p>"
+"<p>The special identifier \"*\" refers to the program counter (PC).</p>"
+"<h5 id=\"examples\">Examples</h5>"
+"<pre><code>  ORG $C000            ....    Set start address (PC) to C000.<br>"
+"  LABEL1 LDA #4        ....    Define LABEL1 with address of instruction LDA.<br>"
+"         BNE LABEL2    ....    Jump to address of label LABEL2.<br>"
+"  STORE  EQU $0810     ....    Define STORE with value $0810.<br>"
+"  HERE   EQU *         ....    Define HERE with current address (PC).<br>"
+"  HERE2                ....    Define HERE2 with current address (PC).<br>"
+"         LDA STORE     ....    Load LO-byte of STORE having value $10.</code></pre>"
+"<h4 id=\"pragmas\">Pragmas</h4>"
+"<pre><code>  Pragmas start with a dot (.) and must be the only expression in a line:<br>"
+"  .BYTE BB    ....    Insert 8 bit byte at current address into code.<br>"
+"  .WORD HHLL  ....    Insert 16 bit word at current address into code.<br>"
+"  .AT /ABC/   ....  Insert Ascii string Terminated<br>"
+"  .END        ....    End of source, stop assembly. (optional)</code></pre>"
+"<h4 id=\"comments\">Comments</h4>"
+"<pre><code>  ; comment   ....    Any sequence of characters after a semicolon util end of the line is ignored.</code></pre>"
+"<h4 id=\"white-space\">White Space</h4>"
+"<pre><code>  The assembler does not rely on any special formatting with following exclusion:</code></pre>"
+"<p>There must be white space between a label and a opcode and the opcode and any operands. Only one instruction per line is permitted.</p>"
+"<h4 id=\"code-example\">Code Example</h4>"
+"<h5 id=\"src\">Src:</h5>"
+"<pre><code>  ORG $C000<br>"
+"         LDX #0<br>"
+"  Label1 TXA<br>"
+"         STA $0400,X<br>"
+"         LDA #1<br>"
+"         STA $D800,X<br>"
+"         INX<br>"
+"         BNE Label1<br>"
+"         RTS<br>"
+"  .END</code></pre>"
+"<h5 id=\"listing\">Listing:</h5>"
+"<pre><code>  *= $C000<br>"
+"  C000        LDX #$00    A2 00<br>"
+"  C002 Label1 TXA         8A<br>"
+"  C003        STA $0400,X 9D 00 04<br>"
+"  C006        LDA #$01    A9 01<br>"
+"  C008        STA $D800,X 9D 00 D8<br>"
+"  C00B        INX         E8<br>"
+"  C00C        BNE $C002   D0 F4<br>"
+"  C00E        RTS         60<br>"
+"  C00F        .END<br>"
+"  done.</code></pre>"
+"<h5 id=\"object-code\">Object Code:</h5>"
+"<pre><code>  A2 00 8A 9D 00 04 A9 01<br>"
+"  9D 00 D8 E8 D0 F4 60</code></pre>"
+"<h2 id=\"feature-wish-list\">FEATURE wish-list</h2><hr>"
+"<p>.DFB or .DB  = <strong>D</strong>e<strong>F</strong>ine <strong>B</strong>yte <em>(borrowed from Merlin-16)</em></p>"
+"<h5 id=\"example\">Example:</h5>"
+"<pre><code>  .DFB expression,expression,expression,...</code></pre>"
+"<p>.DS  = <strong>D</strong>efine <strong>S</strong>torage <em>(borrowed from Merlin-16)</em></p>"
+"<h5 id=\"example-1\">Example:</h5>"
+"<pre><code>  .DS expression1                ; zero out [expression1] bytes of memory<br>"
+"  .DS expression1,expression2    ; put [expression2] in [expression1] bytes of memory<br>"
+"  .DS \                          ; zero out until next page of memory<br>"
+"  .DS \,expression2              ; put [expression2] until next page of memory</code></pre>"

